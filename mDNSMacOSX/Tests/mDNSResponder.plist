<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>Project</key>
	<string>mDNSResponder</string>
	<key>RadarComponents</key>
	<dict>
		<key>Name</key>
		<string>mDNSResponder</string>
		<key>Version</key>
		<string>all</string>
	</dict>
	<key>Tests</key>
	<array>
		<dict>
			<key>TestName</key>
			<string>Check Hardendened Heap Status</string>
			<key>Description</key>
			<string>Check the status of Hardened Heap (positive result will show Rosetta entries)</string>
			<key>AsRoot</key>
			<true/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>60</integer>
			<key>IgnoreOutput</key>
			<true/>
			<key>Command</key>
			<array>
				<string>/usr/bin/footprint</string>
				<string>mDNSResponder</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>mDNSResponder Leaks</string>
			<key>Description</key>
			<string>Checks mDNSResponder for memory leaks.</string>
			<key>AsRoot</key>
			<true/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>60</integer>
			<key>IgnoreOutput</key>
			<true/>
			<key>Command</key>
			<array>
				<string>/usr/bin/leaks</string>
				<string>mDNSResponder</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>GAIPerf Advanced</string>
			<key>Description</key>
			<string>Tests correctness of resolving hostnames with ordinary DNS using the GAIPerf Advanced test suite.</string>
			<key>AsRoot</key>
			<true/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>900</integer>
			<key>IgnoreOutput</key>
			<true/>
			<key>Command</key>
			<array>
				<string>/AppleInternal/Tests/mDNSResponder/network-isolate-device</string>
				<string>;</string>
				<string>/usr/local/bin/dnssdutil</string>
				<string>test</string>
				<string>gaiperf</string>
				<string>--suite</string>
				<string>advanced</string>
				<string>--timeLimit</string>
				<string>250</string>
				<string>--format</string>
				<string>json</string>
				<string>--skipPathEval</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>mDNSResponder Leaks</string>
			<key>Description</key>
			<string>Checks mDNSResponder for memory leaks.</string>
			<key>AsRoot</key>
			<true/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>60</integer>
			<key>IgnoreOutput</key>
			<true/>
			<key>Command</key>
			<array>
				<string>/usr/bin/leaks</string>
				<string>mDNSResponder</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>GAIPerf Advanced (DoT)</string>
			<key>Description</key>
			<string>Tests correctness of resolving hostnames with DNS over TLS (DoT) using the GAIPerf Advanced test suite.</string>
			<key>AsRoot</key>
			<true/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>900</integer>
			<key>IgnoreOutput</key>
			<true/>
			<key>Command</key>
			<array>
				<string>/AppleInternal/Tests/mDNSResponder/network-isolate-device</string>
				<string>;</string>
				<string>/usr/local/bin/dnssdutil</string>
				<string>test</string>
				<string>gaiperf</string>
				<string>--suite</string>
				<string>advanced</string>
				<string>--timeLimit</string>
				<string>3000</string>
				<string>--format</string>
				<string>json</string>
				<string>--protocol</string>
				<string>DoT</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>mDNSResponder Leaks</string>
			<key>Description</key>
			<string>Checks mDNSResponder for memory leaks.</string>
			<key>AsRoot</key>
			<true/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>60</integer>
			<key>IgnoreOutput</key>
			<true/>
			<key>Command</key>
			<array>
				<string>/usr/bin/leaks</string>
				<string>mDNSResponder</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>GAIPerf Advanced (DoH)</string>
			<key>Description</key>
			<string>Tests correctness of resolving hostnames with DNS over HTTPS (DoH) using the GAIPerf Advanced test suite.</string>
			<key>AsRoot</key>
			<true/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>900</integer>
			<key>IgnoreOutput</key>
			<true/>
			<key>Command</key>
			<array>
				<string>/AppleInternal/Tests/mDNSResponder/network-isolate-device</string>
				<string>;</string>
				<string>/usr/local/bin/dnssdutil</string>
				<string>test</string>
				<string>gaiperf</string>
				<string>--suite</string>
				<string>advanced</string>
				<string>--timeLimit</string>
				<string>3000</string>
				<string>--format</string>
				<string>json</string>
				<string>--protocol</string>
				<string>DoH</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>mDNSResponder Leaks</string>
			<key>Description</key>
			<string>Checks mDNSResponder for memory leaks.</string>
			<key>AsRoot</key>
			<true/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>60</integer>
			<key>IgnoreOutput</key>
			<true/>
			<key>Command</key>
			<array>
				<string>/usr/bin/leaks</string>
				<string>mDNSResponder</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>DNS Querying</string>
			<key>Description</key>
			<string>Tests mDNSResponder&apos;s DNS querying. Verifies that mDNSResponder doesn&apos;t send more A/AAAA queries than necessary.</string>
			<key>AsRoot</key>
			<true/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>90</integer>
			<key>IgnoreOutput</key>
			<true/>
			<key>Command</key>
			<array>
				<string>/AppleInternal/Tests/mDNSResponder/network-isolate-device</string>
				<string>;</string>
				<string>/usr/local/bin/dnssdutil</string>
				<string>test</string>
				<string>dnsquery</string>
				<string>--format</string>
				<string>json</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>mDNSResponder Leaks</string>
			<key>Description</key>
			<string>Checks mDNSResponder for memory leaks.</string>
			<key>AsRoot</key>
			<true/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>60</integer>
			<key>IgnoreOutput</key>
			<true/>
			<key>Command</key>
			<array>
				<string>/usr/bin/leaks</string>
				<string>mDNSResponder</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>Fast Querier Recovery</string>
			<key>Description</key>
			<string>Tests mDNSResponder&apos;s ability to quickly recover from a transient DNS outage.</string>
			<key>AsRoot</key>
			<false/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>60</integer>
			<key>IgnoreOutput</key>
			<true/>
			<key>Command</key>
			<array>
				<string>/AppleInternal/Tests/mDNSResponder/network-isolate-device</string>
				<string>;</string>
				<string>/usr/local/bin/dnssdutil</string>
				<string>test</string>
				<string>fastrecovery</string>
				<string>--format</string>
				<string>json</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>mDNSResponder Leaks</string>
			<key>Description</key>
			<string>Checks mDNSResponder for memory leaks.</string>
			<key>AsRoot</key>
			<true/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>60</integer>
			<key>IgnoreOutput</key>
			<true/>
			<key>Command</key>
			<array>
				<string>/usr/bin/leaks</string>
				<string>mDNSResponder</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>DNS Server Retry</string>
			<key>Description</key>
			<string>Tests whether mDNSResponder retries queries with a different server if a given server is unresponsive. Also tests mDNSResponder&apos;s handling of DNS responses with every possible RCODE.</string>
			<key>AsRoot</key>
			<true/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>900</integer>
			<key>IgnoreOutput</key>
			<true/>
			<key>Command</key>
			<array>
				<string>/AppleInternal/Tests/mDNSResponder/network-isolate-device</string>
				<string>;</string>
				<string>/usr/local/bin/dnssdutil</string>
				<string>test</string>
				<string>rcodes</string>
				<string>--format</string>
				<string>json</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>mDNSResponder Leaks</string>
			<key>Description</key>
			<string>Checks mDNSResponder for memory leaks.</string>
			<key>AsRoot</key>
			<true/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>60</integer>
			<key>IgnoreOutput</key>
			<true/>
			<key>Command</key>
			<array>
				<string>/usr/bin/leaks</string>
				<string>mDNSResponder</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>Suspicious UDP Reply Defense</string>
			<key>Description</key>
			<string>Tests mDNSResponder&apos;s defense mechanism of falling back to TCP when a response with an invalid message ID, but which is otherwise acceptable, is received over UDP.</string>
			<key>AsRoot</key>
			<true/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>90</integer>
			<key>IgnoreOutput</key>
			<true/>
			<key>Command</key>
			<array>
				<string>/AppleInternal/Tests/mDNSResponder/network-isolate-device</string>
				<string>;</string>
				<string>/usr/local/bin/dnssdutil</string>
				<string>test</string>
				<string>gaiperf</string>
				<string>--suite</string>
				<string>basic</string>
				<string>--timeLimit</string>
				<string>250</string>
				<string>--format</string>
				<string>json</string>
				<string>--skipPathEval</string>
				<string>--badUDPMode</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>mDNSResponder Leaks</string>
			<key>Description</key>
			<string>Checks mDNSResponder for memory leaks.</string>
			<key>AsRoot</key>
			<true/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>60</integer>
			<key>IgnoreOutput</key>
			<true/>
			<key>Command</key>
			<array>
				<string>/usr/bin/leaks</string>
				<string>mDNSResponder</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>mDNS Discovery 1-1-1</string>
			<key>Description</key>
			<string>Tests mDNS discovery and resolution of one service instance with one one-byte TXT record, one A record, and one AAAA record.</string>
			<key>AsRoot</key>
			<true/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>10</integer>
			<key>IgnoreOutput</key>
			<true/>
			<key>Command</key>
			<array>
				<string>/AppleInternal/Tests/mDNSResponder/network-isolate-device</string>
				<string>;</string>
				<string>/usr/local/bin/dnssdutil</string>
				<string>test</string>
				<string>mdnsdiscovery</string>
				<string>--interface</string>
				<string>lo0</string>
				<string>--instanceCount</string>
				<string>1</string>
				<string>--txtSize</string>
				<string>1</string>
				<string>--browseTime</string>
				<string>3</string>
				<string>--countA</string>
				<string>1</string>
				<string>--countAAAA</string>
				<string>1</string>
				<string>--ipv4</string>
				<string>--ipv6</string>
				<string>--format</string>
				<string>json</string>
				<string>--flushCache</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>mDNSResponder Leaks</string>
			<key>Description</key>
			<string>Checks mDNSResponder for memory leaks.</string>
			<key>AsRoot</key>
			<true/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>60</integer>
			<key>IgnoreOutput</key>
			<true/>
			<key>Command</key>
			<array>
				<string>/usr/bin/leaks</string>
				<string>mDNSResponder</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>mDNS Discovery 1-1-1 (No Additionals)</string>
			<key>Description</key>
			<string>Tests mDNS discovery and resolution of one service instance with one one-byte TXT record, one A record, and one AAAA record. Responses from mdnsreplier contain no additional answers.</string>
			<key>AsRoot</key>
			<true/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>10</integer>
			<key>IgnoreOutput</key>
			<true/>
			<key>Command</key>
			<array>
				<string>/AppleInternal/Tests/mDNSResponder/network-isolate-device</string>
				<string>;</string>
				<string>/usr/local/bin/dnssdutil</string>
				<string>test</string>
				<string>mdnsdiscovery</string>
				<string>--interface</string>
				<string>lo0</string>
				<string>--instanceCount</string>
				<string>1</string>
				<string>--txtSize</string>
				<string>1</string>
				<string>--browseTime</string>
				<string>3</string>
				<string>--countA</string>
				<string>1</string>
				<string>--countAAAA</string>
				<string>1</string>
				<string>--ipv4</string>
				<string>--ipv6</string>
				<string>--format</string>
				<string>json</string>
				<string>--noAdditionals</string>
				<string>--flushCache</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>mDNSResponder Leaks</string>
			<key>Description</key>
			<string>Checks mDNSResponder for memory leaks.</string>
			<key>AsRoot</key>
			<true/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>60</integer>
			<key>IgnoreOutput</key>
			<true/>
			<key>Command</key>
			<array>
				<string>/usr/bin/leaks</string>
				<string>mDNSResponder</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>mDNS Discovery 10-100-2</string>
			<key>Description</key>
			<string>Tests mDNS discovery and resolution of ten service instances with one 100-byte TXT record, two A records, and two AAAA records.</string>
			<key>AsRoot</key>
			<true/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>10</integer>
			<key>IgnoreOutput</key>
			<true/>
			<key>Command</key>
			<array>
				<string>/AppleInternal/Tests/mDNSResponder/network-isolate-device</string>
				<string>;</string>
				<string>/usr/local/bin/dnssdutil</string>
				<string>test</string>
				<string>mdnsdiscovery</string>
				<string>--interface</string>
				<string>lo0</string>
				<string>--instanceCount</string>
				<string>10</string>
				<string>--txtSize</string>
				<string>100</string>
				<string>--browseTime</string>
				<string>3</string>
				<string>--countA</string>
				<string>2</string>
				<string>--countAAAA</string>
				<string>2</string>
				<string>--ipv4</string>
				<string>--ipv6</string>
				<string>--format</string>
				<string>json</string>
				<string>--flushCache</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>mDNSResponder Leaks</string>
			<key>Description</key>
			<string>Checks mDNSResponder for memory leaks.</string>
			<key>AsRoot</key>
			<true/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>60</integer>
			<key>IgnoreOutput</key>
			<true/>
			<key>Command</key>
			<array>
				<string>/usr/bin/leaks</string>
				<string>mDNSResponder</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>mDNS Discovery 10-100-2 (No Additionals)</string>
			<key>Description</key>
			<string>Tests mDNS discovery and resolution of ten service instances with one 100-byte TXT record, two A records, and two AAAA records. Responses from mdnsreplier contain no additional answers.</string>
			<key>AsRoot</key>
			<true/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>10</integer>
			<key>IgnoreOutput</key>
			<true/>
			<key>Command</key>
			<array>
				<string>/AppleInternal/Tests/mDNSResponder/network-isolate-device</string>
				<string>;</string>
				<string>/usr/local/bin/dnssdutil</string>
				<string>test</string>
				<string>mdnsdiscovery</string>
				<string>--interface</string>
				<string>lo0</string>
				<string>--instanceCount</string>
				<string>10</string>
				<string>--txtSize</string>
				<string>100</string>
				<string>--browseTime</string>
				<string>3</string>
				<string>--countA</string>
				<string>2</string>
				<string>--countAAAA</string>
				<string>2</string>
				<string>--ipv4</string>
				<string>--ipv6</string>
				<string>--format</string>
				<string>json</string>
				<string>--noAdditionals</string>
				<string>--flushCache</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>mDNSResponder Leaks</string>
			<key>Description</key>
			<string>Checks mDNSResponder for memory leaks.</string>
			<key>AsRoot</key>
			<true/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>60</integer>
			<key>IgnoreOutput</key>
			<true/>
			<key>Command</key>
			<array>
				<string>/usr/bin/leaks</string>
				<string>mDNSResponder</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>mDNS Discovery 100-500-2</string>
			<key>Description</key>
			<string>Tests mDNS discovery and resolution of 100 service instances with one 500-byte TXT record, two A records, and two AAAA records.</string>
			<key>AsRoot</key>
			<true/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>10</integer>
			<key>IgnoreOutput</key>
			<true/>
			<key>Command</key>
			<array>
				<string>/AppleInternal/Tests/mDNSResponder/network-isolate-device</string>
				<string>;</string>
				<string>/usr/local/bin/dnssdutil</string>
				<string>test</string>
				<string>mdnsdiscovery</string>
				<string>--interface</string>
				<string>lo0</string>
				<string>--instanceCount</string>
				<string>100</string>
				<string>--txtSize</string>
				<string>500</string>
				<string>--browseTime</string>
				<string>5</string>
				<string>--countA</string>
				<string>2</string>
				<string>--countAAAA</string>
				<string>2</string>
				<string>--ipv4</string>
				<string>--ipv6</string>
				<string>--format</string>
				<string>json</string>
				<string>--flushCache</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>mDNSResponder Leaks</string>
			<key>Description</key>
			<string>Checks mDNSResponder for memory leaks.</string>
			<key>AsRoot</key>
			<true/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>60</integer>
			<key>IgnoreOutput</key>
			<true/>
			<key>Command</key>
			<array>
				<string>/usr/bin/leaks</string>
				<string>mDNSResponder</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>mDNS Discovery 100-500-2 (No Additionals)</string>
			<key>Description</key>
			<string>Tests mDNS discovery and resolution of 100 service instances with one 500-byte TXT record, two A records, and two AAAA records. Responses from mdnsreplier contain no additional answers.</string>
			<key>AsRoot</key>
			<true/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>10</integer>
			<key>IgnoreOutput</key>
			<true/>
			<key>Command</key>
			<array>
				<string>/AppleInternal/Tests/mDNSResponder/network-isolate-device</string>
				<string>;</string>
				<string>/usr/local/bin/dnssdutil</string>
				<string>test</string>
				<string>mdnsdiscovery</string>
				<string>--interface</string>
				<string>lo0</string>
				<string>--instanceCount</string>
				<string>100</string>
				<string>--txtSize</string>
				<string>500</string>
				<string>--browseTime</string>
				<string>5</string>
				<string>--countA</string>
				<string>2</string>
				<string>--countAAAA</string>
				<string>2</string>
				<string>--ipv4</string>
				<string>--ipv6</string>
				<string>--noAdditionals</string>
				<string>--format</string>
				<string>json</string>
				<string>--flushCache</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>mDNSResponder Leaks</string>
			<key>Description</key>
			<string>Checks mDNSResponder for memory leaks.</string>
			<key>AsRoot</key>
			<true/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>60</integer>
			<key>IgnoreOutput</key>
			<true/>
			<key>Command</key>
			<array>
				<string>/usr/bin/leaks</string>
				<string>mDNSResponder</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>mDNS Discovery 1-1-1 (No Cache Flush)</string>
			<key>Description</key>
			<string>Tests mDNS discovery and resolution of one service instance with one one-byte TXT record, one A record, and one AAAA record. Cache is not flushed beforehand.</string>
			<key>AsRoot</key>
			<false/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>10</integer>
			<key>IgnoreOutput</key>
			<true/>
			<key>Command</key>
			<array>
				<string>/AppleInternal/Tests/mDNSResponder/network-isolate-device</string>
				<string>;</string>
				<string>/usr/local/bin/dnssdutil</string>
				<string>test</string>
				<string>mdnsdiscovery</string>
				<string>--interface</string>
				<string>lo0</string>
				<string>--instanceCount</string>
				<string>1</string>
				<string>--txtSize</string>
				<string>1</string>
				<string>--browseTime</string>
				<string>3</string>
				<string>--countA</string>
				<string>1</string>
				<string>--countAAAA</string>
				<string>1</string>
				<string>--ipv4</string>
				<string>--ipv6</string>
				<string>--format</string>
				<string>json</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>mDNSResponder Leaks</string>
			<key>Description</key>
			<string>Checks mDNSResponder for memory leaks.</string>
			<key>AsRoot</key>
			<true/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>60</integer>
			<key>IgnoreOutput</key>
			<true/>
			<key>Command</key>
			<array>
				<string>/usr/bin/leaks</string>
				<string>mDNSResponder</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>mDNS Discovery 1-1-1 (No Cache Flush, No Additionals)</string>
			<key>Description</key>
			<string>Tests mDNS discovery and resolution of one service instance with one one-byte TXT record, one A record, and one AAAA record. Cache is not flushed beforehand. Responses from mdnsreplier contain no additional answers.</string>
			<key>AsRoot</key>
			<false/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>10</integer>
			<key>IgnoreOutput</key>
			<true/>
			<key>Command</key>
			<array>
				<string>/AppleInternal/Tests/mDNSResponder/network-isolate-device</string>
				<string>;</string>
				<string>/usr/local/bin/dnssdutil</string>
				<string>test</string>
				<string>mdnsdiscovery</string>
				<string>--interface</string>
				<string>lo0</string>
				<string>--instanceCount</string>
				<string>1</string>
				<string>--txtSize</string>
				<string>1</string>
				<string>--browseTime</string>
				<string>3</string>
				<string>--countA</string>
				<string>1</string>
				<string>--countAAAA</string>
				<string>1</string>
				<string>--ipv4</string>
				<string>--ipv6</string>
				<string>--format</string>
				<string>json</string>
				<string>--noAdditionals</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>mDNSResponder Leaks</string>
			<key>Description</key>
			<string>Checks mDNSResponder for memory leaks.</string>
			<key>AsRoot</key>
			<true/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>60</integer>
			<key>IgnoreOutput</key>
			<true/>
			<key>Command</key>
			<array>
				<string>/usr/bin/leaks</string>
				<string>mDNSResponder</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>mDNS Discovery 10-100-2 (No Cache Flush)</string>
			<key>Description</key>
			<string>Tests mDNS discovery and resolution of ten service instances with one 100-byte TXT record, two A records, and two AAAA records. Cache is not flushed beforehand.</string>
			<key>AsRoot</key>
			<false/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>10</integer>
			<key>IgnoreOutput</key>
			<true/>
			<key>Command</key>
			<array>
				<string>/AppleInternal/Tests/mDNSResponder/network-isolate-device</string>
				<string>;</string>
				<string>/usr/local/bin/dnssdutil</string>
				<string>test</string>
				<string>mdnsdiscovery</string>
				<string>--interface</string>
				<string>lo0</string>
				<string>--instanceCount</string>
				<string>10</string>
				<string>--txtSize</string>
				<string>100</string>
				<string>--browseTime</string>
				<string>3</string>
				<string>--countA</string>
				<string>2</string>
				<string>--countAAAA</string>
				<string>2</string>
				<string>--ipv4</string>
				<string>--ipv6</string>
				<string>--format</string>
				<string>json</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>mDNSResponder Leaks</string>
			<key>Description</key>
			<string>Checks mDNSResponder for memory leaks.</string>
			<key>AsRoot</key>
			<true/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>60</integer>
			<key>IgnoreOutput</key>
			<true/>
			<key>Command</key>
			<array>
				<string>/usr/bin/leaks</string>
				<string>mDNSResponder</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>mDNS Discovery 10-100-2 (No Cache Flush, No Additionals)</string>
			<key>Description</key>
			<string>Tests mDNS discovery and resolution of ten service instances with one 100-byte TXT record, two A records, and two AAAA records. Cache is not flushed beforehand. Responses from mdnsreplier contain no additional answers.</string>
			<key>AsRoot</key>
			<false/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>10</integer>
			<key>IgnoreOutput</key>
			<true/>
			<key>Command</key>
			<array>
				<string>/AppleInternal/Tests/mDNSResponder/network-isolate-device</string>
				<string>;</string>
				<string>/usr/local/bin/dnssdutil</string>
				<string>test</string>
				<string>mdnsdiscovery</string>
				<string>--interface</string>
				<string>lo0</string>
				<string>--instanceCount</string>
				<string>10</string>
				<string>--txtSize</string>
				<string>100</string>
				<string>--browseTime</string>
				<string>3</string>
				<string>--countA</string>
				<string>2</string>
				<string>--countAAAA</string>
				<string>2</string>
				<string>--ipv4</string>
				<string>--ipv6</string>
				<string>--format</string>
				<string>json</string>
				<string>--noAdditionals</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>mDNSResponder Leaks</string>
			<key>Description</key>
			<string>Checks mDNSResponder for memory leaks.</string>
			<key>AsRoot</key>
			<true/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>60</integer>
			<key>IgnoreOutput</key>
			<true/>
			<key>Command</key>
			<array>
				<string>/usr/bin/leaks</string>
				<string>mDNSResponder</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>mDNS Discovery 100-500-2 (No Cache Flush)</string>
			<key>Description</key>
			<string>Tests mDNS discovery and resolution of 100 service instances with one 500-byte TXT record, two A records, and two AAAA records. Cache is not flushed beforehand.</string>
			<key>AsRoot</key>
			<false/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>10</integer>
			<key>IgnoreOutput</key>
			<true/>
			<key>Command</key>
			<array>
				<string>/AppleInternal/Tests/mDNSResponder/network-isolate-device</string>
				<string>;</string>
				<string>/usr/local/bin/dnssdutil</string>
				<string>test</string>
				<string>mdnsdiscovery</string>
				<string>--interface</string>
				<string>lo0</string>
				<string>--instanceCount</string>
				<string>100</string>
				<string>--txtSize</string>
				<string>500</string>
				<string>--browseTime</string>
				<string>5</string>
				<string>--countA</string>
				<string>2</string>
				<string>--countAAAA</string>
				<string>2</string>
				<string>--ipv4</string>
				<string>--ipv6</string>
				<string>--format</string>
				<string>json</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>mDNSResponder Leaks</string>
			<key>Description</key>
			<string>Checks mDNSResponder for memory leaks.</string>
			<key>AsRoot</key>
			<true/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>60</integer>
			<key>IgnoreOutput</key>
			<true/>
			<key>Command</key>
			<array>
				<string>/usr/bin/leaks</string>
				<string>mDNSResponder</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>mDNS Discovery 100-500-2 (No Cache Flush, No Additionals)</string>
			<key>Description</key>
			<string>Tests mDNS discovery and resolution of 100 service instances with one 500-byte TXT record, two A records, and two AAAA records. Cache is not flushed beforehand. Responses from mdnsreplier contain no additional answers.</string>
			<key>AsRoot</key>
			<false/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>10</integer>
			<key>IgnoreOutput</key>
			<true/>
			<key>Command</key>
			<array>
				<string>/AppleInternal/Tests/mDNSResponder/network-isolate-device</string>
				<string>;</string>
				<string>/usr/local/bin/dnssdutil</string>
				<string>test</string>
				<string>mdnsdiscovery</string>
				<string>--interface</string>
				<string>lo0</string>
				<string>--instanceCount</string>
				<string>100</string>
				<string>--txtSize</string>
				<string>500</string>
				<string>--browseTime</string>
				<string>5</string>
				<string>--countA</string>
				<string>2</string>
				<string>--countAAAA</string>
				<string>2</string>
				<string>--ipv4</string>
				<string>--ipv6</string>
				<string>--noAdditionals</string>
				<string>--format</string>
				<string>json</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>mDNSResponder Leaks</string>
			<key>Description</key>
			<string>Checks mDNSResponder for memory leaks.</string>
			<key>AsRoot</key>
			<true/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>60</integer>
			<key>IgnoreOutput</key>
			<true/>
			<key>Command</key>
			<array>
				<string>/usr/bin/leaks</string>
				<string>mDNSResponder</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>mDNS Discovery w/Packet Drops 10 (IPv4)</string>
			<key>Description</key>
			<string>Tests mDNS discovery and resolution of ten service instances with one 100-byte TXT record, two A records, and two AAAA records over IPv4. The first three responses per service instance are subject to a 0.5 probability of being dropped to test query retries.</string>
			<key>AsRoot</key>
			<true/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>30</integer>
			<key>IgnoreOutput</key>
			<true/>
			<key>Command</key>
			<array>
				<string>/AppleInternal/Tests/mDNSResponder/network-isolate-device</string>
				<string>;</string>
				<string>/usr/local/bin/dnssdutil</string>
				<string>test</string>
				<string>mdnsdiscovery</string>
				<string>--interface</string>
				<string>lo0</string>
				<string>--instanceCount</string>
				<string>10</string>
				<string>--txtSize</string>
				<string>100</string>
				<string>--browseTime</string>
				<string>16</string>
				<string>--countA</string>
				<string>2</string>
				<string>--countAAAA</string>
				<string>2</string>
				<string>--ipv4</string>
				<string>--udrop</string>
				<string>0.5</string>
				<string>--mdrop</string>
				<string>0.5</string>
				<string>--maxDropCount</string>
				<string>3</string>
				<string>--format</string>
				<string>json</string>
				<string>--flushCache</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>mDNSResponder Leaks</string>
			<key>Description</key>
			<string>Checks mDNSResponder for memory leaks.</string>
			<key>AsRoot</key>
			<true/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>60</integer>
			<key>IgnoreOutput</key>
			<true/>
			<key>Command</key>
			<array>
				<string>/usr/bin/leaks</string>
				<string>mDNSResponder</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>mDNS Discovery w/Packet Drops 10 (IPv6)</string>
			<key>Description</key>
			<string>Tests mDNS discovery and resolution of ten service instances with one 100-byte TXT record, two A records, and two AAAA records over IPv6. The first three responses per service instance are subject to a 0.5 probability of being dropped to test query retries.</string>
			<key>AsRoot</key>
			<true/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>30</integer>
			<key>IgnoreOutput</key>
			<true/>
			<key>Command</key>
			<array>
				<string>/AppleInternal/Tests/mDNSResponder/network-isolate-device</string>
				<string>;</string>
				<string>/usr/local/bin/dnssdutil</string>
				<string>test</string>
				<string>mdnsdiscovery</string>
				<string>--interface</string>
				<string>lo0</string>
				<string>--instanceCount</string>
				<string>10</string>
				<string>--txtSize</string>
				<string>100</string>
				<string>--browseTime</string>
				<string>16</string>
				<string>--countA</string>
				<string>2</string>
				<string>--countAAAA</string>
				<string>2</string>
				<string>--ipv6</string>
				<string>--udrop</string>
				<string>0.5</string>
				<string>--mdrop</string>
				<string>0.5</string>
				<string>--maxDropCount</string>
				<string>3</string>
				<string>--format</string>
				<string>json</string>
				<string>--flushCache</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>mDNSResponder Leaks</string>
			<key>Description</key>
			<string>Checks mDNSResponder for memory leaks.</string>
			<key>AsRoot</key>
			<true/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>60</integer>
			<key>IgnoreOutput</key>
			<true/>
			<key>Command</key>
			<array>
				<string>/usr/bin/leaks</string>
				<string>mDNSResponder</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>mDNS Discovery w/Packet Drops 100 (IPv4)</string>
			<key>Description</key>
			<string>Tests mDNS discovery and resolution of 100 service instances with one 100-byte TXT record, two A records, and two AAAA records over IPv4. The first three responses per service instance are subject to a 0.5 probability of being dropped to test query retries.</string>
			<key>AsRoot</key>
			<true/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>30</integer>
			<key>IgnoreOutput</key>
			<true/>
			<key>Command</key>
			<array>
				<string>/AppleInternal/Tests/mDNSResponder/network-isolate-device</string>
				<string>;</string>
				<string>/usr/local/bin/dnssdutil</string>
				<string>test</string>
				<string>mdnsdiscovery</string>
				<string>--interface</string>
				<string>lo0</string>
				<string>--instanceCount</string>
				<string>100</string>
				<string>--txtSize</string>
				<string>100</string>
				<string>--browseTime</string>
				<string>18</string>
				<string>--countA</string>
				<string>2</string>
				<string>--countAAAA</string>
				<string>2</string>
				<string>--ipv4</string>
				<string>--udrop</string>
				<string>0.5</string>
				<string>--mdrop</string>
				<string>0.5</string>
				<string>--maxDropCount</string>
				<string>3</string>
				<string>--format</string>
				<string>json</string>
				<string>--flushCache</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>mDNSResponder Leaks</string>
			<key>Description</key>
			<string>Checks mDNSResponder for memory leaks.</string>
			<key>AsRoot</key>
			<true/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>60</integer>
			<key>IgnoreOutput</key>
			<true/>
			<key>Command</key>
			<array>
				<string>/usr/bin/leaks</string>
				<string>mDNSResponder</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>mDNS Discovery w/Packet Drops 100 (IPv6)</string>
			<key>Description</key>
			<string>Tests mDNS discovery and resolution of 100 service instances with one 100-byte TXT record, two A records, and two AAAA records over IPv6. The first three responses per service instance are subject to a 0.5 probability of being dropped to test query retries.</string>
			<key>AsRoot</key>
			<true/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>30</integer>
			<key>IgnoreOutput</key>
			<true/>
			<key>Command</key>
			<array>
				<string>/AppleInternal/Tests/mDNSResponder/network-isolate-device</string>
				<string>;</string>
				<string>/usr/local/bin/dnssdutil</string>
				<string>test</string>
				<string>mdnsdiscovery</string>
				<string>--interface</string>
				<string>lo0</string>
				<string>--instanceCount</string>
				<string>100</string>
				<string>--txtSize</string>
				<string>100</string>
				<string>--browseTime</string>
				<string>18</string>
				<string>--countA</string>
				<string>2</string>
				<string>--countAAAA</string>
				<string>2</string>
				<string>--ipv6</string>
				<string>--udrop</string>
				<string>0.5</string>
				<string>--mdrop</string>
				<string>0.5</string>
				<string>--maxDropCount</string>
				<string>3</string>
				<string>--format</string>
				<string>json</string>
				<string>--flushCache</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>mDNSResponder Leaks</string>
			<key>Description</key>
			<string>Checks mDNSResponder for memory leaks.</string>
			<key>AsRoot</key>
			<true/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>60</integer>
			<key>IgnoreOutput</key>
			<true/>
			<key>Command</key>
			<array>
				<string>/usr/bin/leaks</string>
				<string>mDNSResponder</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>mDNS Discovery 1-1-1 (New GAI)</string>
			<key>Description</key>
			<string>Tests mDNS discovery and resolution of one service instance with one one-byte TXT record, one A record, and one AAAA record.</string>
			<key>AsRoot</key>
			<true/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>10</integer>
			<key>IgnoreOutput</key>
			<true/>
			<key>Command</key>
			<array>
				<string>/AppleInternal/Tests/mDNSResponder/network-isolate-device</string>
				<string>;</string>
				<string>/usr/local/bin/dnssdutil</string>
				<string>test</string>
				<string>mdnsdiscovery</string>
				<string>--interface</string>
				<string>lo0</string>
				<string>--instanceCount</string>
				<string>1</string>
				<string>--txtSize</string>
				<string>1</string>
				<string>--browseTime</string>
				<string>3</string>
				<string>--countA</string>
				<string>1</string>
				<string>--countAAAA</string>
				<string>1</string>
				<string>--ipv4</string>
				<string>--ipv6</string>
				<string>--format</string>
				<string>json</string>
				<string>--flushCache</string>
				<string>--useNewGAI</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>mDNSResponder Leaks</string>
			<key>Description</key>
			<string>Checks mDNSResponder for memory leaks.</string>
			<key>AsRoot</key>
			<true/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>60</integer>
			<key>IgnoreOutput</key>
			<true/>
			<key>Command</key>
			<array>
				<string>/usr/bin/leaks</string>
				<string>mDNSResponder</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>mDNS Discovery 1-1-1 (No Additionals, New GAI)</string>
			<key>Description</key>
			<string>Tests mDNS discovery and resolution of one service instance with one one-byte TXT record, one A record, and one AAAA record. Responses from mdnsreplier contain no additional answers.</string>
			<key>AsRoot</key>
			<true/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>10</integer>
			<key>IgnoreOutput</key>
			<true/>
			<key>Command</key>
			<array>
				<string>/AppleInternal/Tests/mDNSResponder/network-isolate-device</string>
				<string>;</string>
				<string>/usr/local/bin/dnssdutil</string>
				<string>test</string>
				<string>mdnsdiscovery</string>
				<string>--interface</string>
				<string>lo0</string>
				<string>--instanceCount</string>
				<string>1</string>
				<string>--txtSize</string>
				<string>1</string>
				<string>--browseTime</string>
				<string>3</string>
				<string>--countA</string>
				<string>1</string>
				<string>--countAAAA</string>
				<string>1</string>
				<string>--ipv4</string>
				<string>--ipv6</string>
				<string>--format</string>
				<string>json</string>
				<string>--noAdditionals</string>
				<string>--flushCache</string>
				<string>--useNewGAI</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>mDNSResponder Leaks</string>
			<key>Description</key>
			<string>Checks mDNSResponder for memory leaks.</string>
			<key>AsRoot</key>
			<true/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>60</integer>
			<key>IgnoreOutput</key>
			<true/>
			<key>Command</key>
			<array>
				<string>/usr/bin/leaks</string>
				<string>mDNSResponder</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>mDNS Discovery 10-100-2 (New GAI)</string>
			<key>Description</key>
			<string>Tests mDNS discovery and resolution of ten service instances with one 100-byte TXT record, two A records, and two AAAA records.</string>
			<key>AsRoot</key>
			<true/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>10</integer>
			<key>IgnoreOutput</key>
			<true/>
			<key>Command</key>
			<array>
				<string>/AppleInternal/Tests/mDNSResponder/network-isolate-device</string>
				<string>;</string>
				<string>/usr/local/bin/dnssdutil</string>
				<string>test</string>
				<string>mdnsdiscovery</string>
				<string>--interface</string>
				<string>lo0</string>
				<string>--instanceCount</string>
				<string>10</string>
				<string>--txtSize</string>
				<string>100</string>
				<string>--browseTime</string>
				<string>3</string>
				<string>--countA</string>
				<string>2</string>
				<string>--countAAAA</string>
				<string>2</string>
				<string>--ipv4</string>
				<string>--ipv6</string>
				<string>--format</string>
				<string>json</string>
				<string>--flushCache</string>
				<string>--useNewGAI</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>mDNSResponder Leaks</string>
			<key>Description</key>
			<string>Checks mDNSResponder for memory leaks.</string>
			<key>AsRoot</key>
			<true/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>60</integer>
			<key>IgnoreOutput</key>
			<true/>
			<key>Command</key>
			<array>
				<string>/usr/bin/leaks</string>
				<string>mDNSResponder</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>mDNS Discovery 10-100-2 (No Additionals, New GAI)</string>
			<key>Description</key>
			<string>Tests mDNS discovery and resolution of ten service instances with one 100-byte TXT record, two A records, and two AAAA records. Responses from mdnsreplier contain no additional answers.</string>
			<key>AsRoot</key>
			<true/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>10</integer>
			<key>IgnoreOutput</key>
			<true/>
			<key>Command</key>
			<array>
				<string>/AppleInternal/Tests/mDNSResponder/network-isolate-device</string>
				<string>;</string>
				<string>/usr/local/bin/dnssdutil</string>
				<string>test</string>
				<string>mdnsdiscovery</string>
				<string>--interface</string>
				<string>lo0</string>
				<string>--instanceCount</string>
				<string>10</string>
				<string>--txtSize</string>
				<string>100</string>
				<string>--browseTime</string>
				<string>3</string>
				<string>--countA</string>
				<string>2</string>
				<string>--countAAAA</string>
				<string>2</string>
				<string>--ipv4</string>
				<string>--ipv6</string>
				<string>--format</string>
				<string>json</string>
				<string>--noAdditionals</string>
				<string>--flushCache</string>
				<string>--useNewGAI</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>mDNSResponder Leaks</string>
			<key>Description</key>
			<string>Checks mDNSResponder for memory leaks.</string>
			<key>AsRoot</key>
			<true/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>60</integer>
			<key>IgnoreOutput</key>
			<true/>
			<key>Command</key>
			<array>
				<string>/usr/bin/leaks</string>
				<string>mDNSResponder</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>mDNS Discovery 100-500-2 (New GAI)</string>
			<key>Description</key>
			<string>Tests mDNS discovery and resolution of 100 service instances with one 500-byte TXT record, two A records, and two AAAA records.</string>
			<key>AsRoot</key>
			<true/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>10</integer>
			<key>IgnoreOutput</key>
			<true/>
			<key>Command</key>
			<array>
				<string>/AppleInternal/Tests/mDNSResponder/network-isolate-device</string>
				<string>;</string>
				<string>/usr/local/bin/dnssdutil</string>
				<string>test</string>
				<string>mdnsdiscovery</string>
				<string>--interface</string>
				<string>lo0</string>
				<string>--instanceCount</string>
				<string>100</string>
				<string>--txtSize</string>
				<string>500</string>
				<string>--browseTime</string>
				<string>5</string>
				<string>--countA</string>
				<string>2</string>
				<string>--countAAAA</string>
				<string>2</string>
				<string>--ipv4</string>
				<string>--ipv6</string>
				<string>--format</string>
				<string>json</string>
				<string>--flushCache</string>
				<string>--useNewGAI</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>mDNSResponder Leaks</string>
			<key>Description</key>
			<string>Checks mDNSResponder for memory leaks.</string>
			<key>AsRoot</key>
			<true/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>60</integer>
			<key>IgnoreOutput</key>
			<true/>
			<key>Command</key>
			<array>
				<string>/usr/bin/leaks</string>
				<string>mDNSResponder</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>mDNS Discovery 100-500-2 (No Additionals, New GAI)</string>
			<key>Description</key>
			<string>Tests mDNS discovery and resolution of 100 service instances with one 500-byte TXT record, two A records, and two AAAA records. Responses from mdnsreplier contain no additional answers.</string>
			<key>AsRoot</key>
			<true/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>10</integer>
			<key>IgnoreOutput</key>
			<true/>
			<key>Command</key>
			<array>
				<string>/AppleInternal/Tests/mDNSResponder/network-isolate-device</string>
				<string>;</string>
				<string>/usr/local/bin/dnssdutil</string>
				<string>test</string>
				<string>mdnsdiscovery</string>
				<string>--interface</string>
				<string>lo0</string>
				<string>--instanceCount</string>
				<string>100</string>
				<string>--txtSize</string>
				<string>500</string>
				<string>--browseTime</string>
				<string>5</string>
				<string>--countA</string>
				<string>2</string>
				<string>--countAAAA</string>
				<string>2</string>
				<string>--ipv4</string>
				<string>--ipv6</string>
				<string>--noAdditionals</string>
				<string>--format</string>
				<string>json</string>
				<string>--flushCache</string>
				<string>--useNewGAI</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>mDNSResponder Leaks</string>
			<key>Description</key>
			<string>Checks mDNSResponder for memory leaks.</string>
			<key>AsRoot</key>
			<true/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>60</integer>
			<key>IgnoreOutput</key>
			<true/>
			<key>Command</key>
			<array>
				<string>/usr/bin/leaks</string>
				<string>mDNSResponder</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>mDNS Discovery 1-1-1 (No Cache Flush, New GAI)</string>
			<key>Description</key>
			<string>Tests mDNS discovery and resolution of one service instance with one one-byte TXT record, one A record, and one AAAA record. Cache is not flushed beforehand.</string>
			<key>AsRoot</key>
			<false/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>10</integer>
			<key>IgnoreOutput</key>
			<true/>
			<key>Command</key>
			<array>
				<string>/AppleInternal/Tests/mDNSResponder/network-isolate-device</string>
				<string>;</string>
				<string>/usr/local/bin/dnssdutil</string>
				<string>test</string>
				<string>mdnsdiscovery</string>
				<string>--interface</string>
				<string>lo0</string>
				<string>--instanceCount</string>
				<string>1</string>
				<string>--txtSize</string>
				<string>1</string>
				<string>--browseTime</string>
				<string>3</string>
				<string>--countA</string>
				<string>1</string>
				<string>--countAAAA</string>
				<string>1</string>
				<string>--ipv4</string>
				<string>--ipv6</string>
				<string>--format</string>
				<string>json</string>
				<string>--useNewGAI</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>mDNSResponder Leaks</string>
			<key>Description</key>
			<string>Checks mDNSResponder for memory leaks.</string>
			<key>AsRoot</key>
			<true/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>60</integer>
			<key>IgnoreOutput</key>
			<true/>
			<key>Command</key>
			<array>
				<string>/usr/bin/leaks</string>
				<string>mDNSResponder</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>mDNS Discovery 1-1-1 (No Cache Flush, No Additionals, New GAI)</string>
			<key>Description</key>
			<string>Tests mDNS discovery and resolution of one service instance with one one-byte TXT record, one A record, and one AAAA record. Cache is not flushed beforehand. Responses from mdnsreplier contain no additional answers.</string>
			<key>AsRoot</key>
			<false/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>10</integer>
			<key>IgnoreOutput</key>
			<true/>
			<key>Command</key>
			<array>
				<string>/AppleInternal/Tests/mDNSResponder/network-isolate-device</string>
				<string>;</string>
				<string>/usr/local/bin/dnssdutil</string>
				<string>test</string>
				<string>mdnsdiscovery</string>
				<string>--interface</string>
				<string>lo0</string>
				<string>--instanceCount</string>
				<string>1</string>
				<string>--txtSize</string>
				<string>1</string>
				<string>--browseTime</string>
				<string>3</string>
				<string>--countA</string>
				<string>1</string>
				<string>--countAAAA</string>
				<string>1</string>
				<string>--ipv4</string>
				<string>--ipv6</string>
				<string>--format</string>
				<string>json</string>
				<string>--noAdditionals</string>
				<string>--useNewGAI</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>mDNSResponder Leaks</string>
			<key>Description</key>
			<string>Checks mDNSResponder for memory leaks.</string>
			<key>AsRoot</key>
			<true/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>60</integer>
			<key>IgnoreOutput</key>
			<true/>
			<key>Command</key>
			<array>
				<string>/usr/bin/leaks</string>
				<string>mDNSResponder</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>mDNS Discovery 10-100-2 (No Cache Flush, New GAI)</string>
			<key>Description</key>
			<string>Tests mDNS discovery and resolution of ten service instances with one 100-byte TXT record, two A records, and two AAAA records. Cache is not flushed beforehand.</string>
			<key>AsRoot</key>
			<false/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>10</integer>
			<key>IgnoreOutput</key>
			<true/>
			<key>Command</key>
			<array>
				<string>/AppleInternal/Tests/mDNSResponder/network-isolate-device</string>
				<string>;</string>
				<string>/usr/local/bin/dnssdutil</string>
				<string>test</string>
				<string>mdnsdiscovery</string>
				<string>--interface</string>
				<string>lo0</string>
				<string>--instanceCount</string>
				<string>10</string>
				<string>--txtSize</string>
				<string>100</string>
				<string>--browseTime</string>
				<string>3</string>
				<string>--countA</string>
				<string>2</string>
				<string>--countAAAA</string>
				<string>2</string>
				<string>--ipv4</string>
				<string>--ipv6</string>
				<string>--format</string>
				<string>json</string>
				<string>--useNewGAI</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>mDNSResponder Leaks</string>
			<key>Description</key>
			<string>Checks mDNSResponder for memory leaks.</string>
			<key>AsRoot</key>
			<true/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>60</integer>
			<key>IgnoreOutput</key>
			<true/>
			<key>Command</key>
			<array>
				<string>/usr/bin/leaks</string>
				<string>mDNSResponder</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>mDNS Discovery 10-100-2 (No Cache Flush, No Additionals, New GAI)</string>
			<key>Description</key>
			<string>Tests mDNS discovery and resolution of ten service instances with one 100-byte TXT record, two A records, and two AAAA records. Cache is not flushed beforehand. Responses from mdnsreplier contain no additional answers.</string>
			<key>AsRoot</key>
			<false/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>10</integer>
			<key>IgnoreOutput</key>
			<true/>
			<key>Command</key>
			<array>
				<string>/AppleInternal/Tests/mDNSResponder/network-isolate-device</string>
				<string>;</string>
				<string>/usr/local/bin/dnssdutil</string>
				<string>test</string>
				<string>mdnsdiscovery</string>
				<string>--interface</string>
				<string>lo0</string>
				<string>--instanceCount</string>
				<string>10</string>
				<string>--txtSize</string>
				<string>100</string>
				<string>--browseTime</string>
				<string>3</string>
				<string>--countA</string>
				<string>2</string>
				<string>--countAAAA</string>
				<string>2</string>
				<string>--ipv4</string>
				<string>--ipv6</string>
				<string>--format</string>
				<string>json</string>
				<string>--noAdditionals</string>
				<string>--useNewGAI</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>mDNSResponder Leaks</string>
			<key>Description</key>
			<string>Checks mDNSResponder for memory leaks.</string>
			<key>AsRoot</key>
			<true/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>60</integer>
			<key>IgnoreOutput</key>
			<true/>
			<key>Command</key>
			<array>
				<string>/usr/bin/leaks</string>
				<string>mDNSResponder</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>mDNS Discovery 100-500-2 (No Cache Flush, New GAI)</string>
			<key>Description</key>
			<string>Tests mDNS discovery and resolution of 100 service instances with one 500-byte TXT record, two A records, and two AAAA records. Cache is not flushed beforehand.</string>
			<key>AsRoot</key>
			<false/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>10</integer>
			<key>IgnoreOutput</key>
			<true/>
			<key>Command</key>
			<array>
				<string>/AppleInternal/Tests/mDNSResponder/network-isolate-device</string>
				<string>;</string>
				<string>/usr/local/bin/dnssdutil</string>
				<string>test</string>
				<string>mdnsdiscovery</string>
				<string>--interface</string>
				<string>lo0</string>
				<string>--instanceCount</string>
				<string>100</string>
				<string>--txtSize</string>
				<string>500</string>
				<string>--browseTime</string>
				<string>5</string>
				<string>--countA</string>
				<string>2</string>
				<string>--countAAAA</string>
				<string>2</string>
				<string>--ipv4</string>
				<string>--ipv6</string>
				<string>--format</string>
				<string>json</string>
				<string>--useNewGAI</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>mDNSResponder Leaks</string>
			<key>Description</key>
			<string>Checks mDNSResponder for memory leaks.</string>
			<key>AsRoot</key>
			<true/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>60</integer>
			<key>IgnoreOutput</key>
			<true/>
			<key>Command</key>
			<array>
				<string>/usr/bin/leaks</string>
				<string>mDNSResponder</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>mDNS Discovery 100-500-2 (No Cache Flush, No Additionals, New GAI)</string>
			<key>Description</key>
			<string>Tests mDNS discovery and resolution of 100 service instances with one 500-byte TXT record, two A records, and two AAAA records. Cache is not flushed beforehand. Responses from mdnsreplier contain no additional answers.</string>
			<key>AsRoot</key>
			<false/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>10</integer>
			<key>IgnoreOutput</key>
			<true/>
			<key>Command</key>
			<array>
				<string>/AppleInternal/Tests/mDNSResponder/network-isolate-device</string>
				<string>;</string>
				<string>/usr/local/bin/dnssdutil</string>
				<string>test</string>
				<string>mdnsdiscovery</string>
				<string>--interface</string>
				<string>lo0</string>
				<string>--instanceCount</string>
				<string>100</string>
				<string>--txtSize</string>
				<string>500</string>
				<string>--browseTime</string>
				<string>5</string>
				<string>--countA</string>
				<string>2</string>
				<string>--countAAAA</string>
				<string>2</string>
				<string>--ipv4</string>
				<string>--ipv6</string>
				<string>--noAdditionals</string>
				<string>--format</string>
				<string>json</string>
				<string>--useNewGAI</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>mDNSResponder Leaks</string>
			<key>Description</key>
			<string>Checks mDNSResponder for memory leaks.</string>
			<key>AsRoot</key>
			<true/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>60</integer>
			<key>IgnoreOutput</key>
			<true/>
			<key>Command</key>
			<array>
				<string>/usr/bin/leaks</string>
				<string>mDNSResponder</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>mDNS Discovery w/Packet Drops 10 (IPv4, New GAI)</string>
			<key>Description</key>
			<string>Tests mDNS discovery and resolution of ten service instances with one 100-byte TXT record, two A records, and two AAAA records over IPv4. The first three responses per service instance are subject to a 0.5 probability of being dropped to test query retries.</string>
			<key>AsRoot</key>
			<true/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>30</integer>
			<key>IgnoreOutput</key>
			<true/>
			<key>Command</key>
			<array>
				<string>/AppleInternal/Tests/mDNSResponder/network-isolate-device</string>
				<string>;</string>
				<string>/usr/local/bin/dnssdutil</string>
				<string>test</string>
				<string>mdnsdiscovery</string>
				<string>--interface</string>
				<string>lo0</string>
				<string>--instanceCount</string>
				<string>10</string>
				<string>--txtSize</string>
				<string>100</string>
				<string>--browseTime</string>
				<string>16</string>
				<string>--countA</string>
				<string>2</string>
				<string>--countAAAA</string>
				<string>2</string>
				<string>--ipv4</string>
				<string>--udrop</string>
				<string>0.5</string>
				<string>--mdrop</string>
				<string>0.5</string>
				<string>--maxDropCount</string>
				<string>3</string>
				<string>--format</string>
				<string>json</string>
				<string>--flushCache</string>
				<string>--useNewGAI</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>mDNSResponder Leaks</string>
			<key>Description</key>
			<string>Checks mDNSResponder for memory leaks.</string>
			<key>AsRoot</key>
			<true/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>60</integer>
			<key>IgnoreOutput</key>
			<true/>
			<key>Command</key>
			<array>
				<string>/usr/bin/leaks</string>
				<string>mDNSResponder</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>mDNS Discovery w/Packet Drops 10 (IPv6, New GAI)</string>
			<key>Description</key>
			<string>Tests mDNS discovery and resolution of ten service instances with one 100-byte TXT record, two A records, and two AAAA records over IPv6. The first three responses per service instance are subject to a 0.5 probability of being dropped to test query retries.</string>
			<key>AsRoot</key>
			<true/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>30</integer>
			<key>IgnoreOutput</key>
			<true/>
			<key>Command</key>
			<array>
				<string>/AppleInternal/Tests/mDNSResponder/network-isolate-device</string>
				<string>;</string>
				<string>/usr/local/bin/dnssdutil</string>
				<string>test</string>
				<string>mdnsdiscovery</string>
				<string>--interface</string>
				<string>lo0</string>
				<string>--instanceCount</string>
				<string>10</string>
				<string>--txtSize</string>
				<string>100</string>
				<string>--browseTime</string>
				<string>16</string>
				<string>--countA</string>
				<string>2</string>
				<string>--countAAAA</string>
				<string>2</string>
				<string>--ipv6</string>
				<string>--udrop</string>
				<string>0.5</string>
				<string>--mdrop</string>
				<string>0.5</string>
				<string>--maxDropCount</string>
				<string>3</string>
				<string>--format</string>
				<string>json</string>
				<string>--flushCache</string>
				<string>--useNewGAI</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>mDNSResponder Leaks</string>
			<key>Description</key>
			<string>Checks mDNSResponder for memory leaks.</string>
			<key>AsRoot</key>
			<true/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>60</integer>
			<key>IgnoreOutput</key>
			<true/>
			<key>Command</key>
			<array>
				<string>/usr/bin/leaks</string>
				<string>mDNSResponder</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>mDNS Discovery w/Packet Drops 100 (IPv4, New GAI)</string>
			<key>Description</key>
			<string>Tests mDNS discovery and resolution of 100 service instances with one 100-byte TXT record, two A records, and two AAAA records over IPv4. The first three responses per service instance are subject to a 0.5 probability of being dropped to test query retries.</string>
			<key>AsRoot</key>
			<true/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>30</integer>
			<key>IgnoreOutput</key>
			<true/>
			<key>Command</key>
			<array>
				<string>/AppleInternal/Tests/mDNSResponder/network-isolate-device</string>
				<string>;</string>
				<string>/usr/local/bin/dnssdutil</string>
				<string>test</string>
				<string>mdnsdiscovery</string>
				<string>--interface</string>
				<string>lo0</string>
				<string>--instanceCount</string>
				<string>100</string>
				<string>--txtSize</string>
				<string>100</string>
				<string>--browseTime</string>
				<string>18</string>
				<string>--countA</string>
				<string>2</string>
				<string>--countAAAA</string>
				<string>2</string>
				<string>--ipv4</string>
				<string>--udrop</string>
				<string>0.5</string>
				<string>--mdrop</string>
				<string>0.5</string>
				<string>--maxDropCount</string>
				<string>3</string>
				<string>--format</string>
				<string>json</string>
				<string>--flushCache</string>
				<string>--useNewGAI</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>mDNSResponder Leaks</string>
			<key>Description</key>
			<string>Checks mDNSResponder for memory leaks.</string>
			<key>AsRoot</key>
			<true/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>60</integer>
			<key>IgnoreOutput</key>
			<true/>
			<key>Command</key>
			<array>
				<string>/usr/bin/leaks</string>
				<string>mDNSResponder</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>mDNS Discovery w/Packet Drops 100 (IPv6, New GAI)</string>
			<key>Description</key>
			<string>Tests mDNS discovery and resolution of 100 service instances with one 100-byte TXT record, two A records, and two AAAA records over IPv6. The first three responses per service instance are subject to a 0.5 probability of being dropped to test query retries.</string>
			<key>AsRoot</key>
			<true/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>30</integer>
			<key>IgnoreOutput</key>
			<true/>
			<key>Command</key>
			<array>
				<string>/AppleInternal/Tests/mDNSResponder/network-isolate-device</string>
				<string>;</string>
				<string>/usr/local/bin/dnssdutil</string>
				<string>test</string>
				<string>mdnsdiscovery</string>
				<string>--interface</string>
				<string>lo0</string>
				<string>--instanceCount</string>
				<string>100</string>
				<string>--txtSize</string>
				<string>100</string>
				<string>--browseTime</string>
				<string>18</string>
				<string>--countA</string>
				<string>2</string>
				<string>--countAAAA</string>
				<string>2</string>
				<string>--ipv6</string>
				<string>--udrop</string>
				<string>0.5</string>
				<string>--mdrop</string>
				<string>0.5</string>
				<string>--maxDropCount</string>
				<string>3</string>
				<string>--format</string>
				<string>json</string>
				<string>--flushCache</string>
				<string>--useNewGAI</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>mDNSResponder Leaks</string>
			<key>Description</key>
			<string>Checks mDNSResponder for memory leaks.</string>
			<key>AsRoot</key>
			<true/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>60</integer>
			<key>IgnoreOutput</key>
			<true/>
			<key>Command</key>
			<array>
				<string>/usr/bin/leaks</string>
				<string>mDNSResponder</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>mDNS Discovery 500-200-1</string>
			<key>Description</key>
			<string>Tests mDNS discovery and resolution of 500 service instances with one 200-byte TXT record, one A record, and one AAAA record.</string>
			<key>AsRoot</key>
			<true/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>60</integer>
			<key>IgnoreOutput</key>
			<true/>
			<key>Command</key>
			<array>
				<string>/AppleInternal/Tests/mDNSResponder/network-isolate-device</string>
				<string>;</string>
				<string>/usr/local/bin/dnssdutil</string>
				<string>test</string>
				<string>mdnsdiscovery</string>
				<string>--interface</string>
				<string>lo0</string>
				<string>--instanceCount</string>
				<string>500</string>
				<string>--txtSize</string>
				<string>200</string>
				<string>--browseTime</string>
				<string>20</string>
				<string>--countA</string>
				<string>1</string>
				<string>--countAAAA</string>
				<string>1</string>
				<string>--ipv4</string>
				<string>--ipv6</string>
				<string>--format</string>
				<string>json</string>
				<string>--flushCache</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>mDNSResponder Leaks</string>
			<key>Description</key>
			<string>Checks mDNSResponder for memory leaks.</string>
			<key>AsRoot</key>
			<true/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>60</integer>
			<key>IgnoreOutput</key>
			<true/>
			<key>Command</key>
			<array>
				<string>/usr/bin/leaks</string>
				<string>mDNSResponder</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>mDNS Discovery 500-200-1 w/Memory Limit</string>
			<key>Description</key>
			<string>Tests mDNS discovery and resolution of 500 service instances with one 200-byte TXT record, one A record, and one AAAA record. Also, requires that mDNSResponder&apos;s heap memory growth doesn&apos;t exceed 3.2 MB. Note: This test comes after the &quot;mDNS Discovery 500-200-1&quot; test to ensure that mDNSResponder&apos;s record cache capacity doesn&apos;t have to grow during this test because we don&apos;t want increases to mDNSResponder&apos;s record cache capacity to be misconstrued as memory growth for client requests.</string>
			<key>AsRoot</key>
			<true/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>120</integer>
			<key>IgnoreOutput</key>
			<true/>
			<key>Command</key>
			<array>
				<string>/AppleInternal/Tests/mDNSResponder/network-isolate-device</string>
				<string>;</string>
				<string>/usr/local/bin/dnssdutil</string>
				<string>test</string>
				<string>mdnsdiscovery</string>
				<string>--interface</string>
				<string>lo0</string>
				<string>--instanceCount</string>
				<string>500</string>
				<string>--txtSize</string>
				<string>200</string>
				<string>--browseTime</string>
				<string>20</string>
				<string>--countA</string>
				<string>1</string>
				<string>--countAAAA</string>
				<string>1</string>
				<string>--ipv4</string>
				<string>--ipv6</string>
				<string>--format</string>
				<string>json</string>
				<string>--flushCache</string>
				<string>--memoryLimit</string>
				<string>3355443</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>mDNSResponder Leaks</string>
			<key>Description</key>
			<string>Checks mDNSResponder for memory leaks.</string>
			<key>AsRoot</key>
			<true/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>60</integer>
			<key>IgnoreOutput</key>
			<true/>
			<key>Command</key>
			<array>
				<string>/usr/bin/leaks</string>
				<string>mDNSResponder</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>DotLocal Queries</string>
			<key>Description</key>
			<string>Tests DNS and mDNS queries for domain names in the local domain.</string>
			<key>AsRoot</key>
			<false/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>40</integer>
			<key>IgnoreOutput</key>
			<true/>
			<key>Command</key>
			<array>
				<string>/AppleInternal/Tests/mDNSResponder/network-isolate-device</string>
				<string>;</string>
				<string>/usr/local/bin/dnssdutil</string>
				<string>test</string>
				<string>dotlocal</string>
				<string>--interface</string>
				<string>lo0</string>
				<string>--format</string>
				<string>json</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>mDNSResponder Leaks</string>
			<key>Description</key>
			<string>Checks mDNSResponder for memory leaks.</string>
			<key>AsRoot</key>
			<true/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>60</integer>
			<key>IgnoreOutput</key>
			<true/>
			<key>Command</key>
			<array>
				<string>/usr/bin/leaks</string>
				<string>mDNSResponder</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>Service Registration</string>
			<key>Description</key>
			<string>Tests Bonjour service registration.</string>
			<key>AsRoot</key>
			<false/>
			<key>RequiresWiFi</key>
			<true/>
			<key>Timeout</key>
			<integer>120</integer>
			<key>IgnoreOutput</key>
			<true/>
			<key>Command</key>
			<array>
				<string>/usr/local/bin/dnssdutil</string>
				<string>test</string>
				<string>registration</string>
				<string>--format</string>
				<string>json</string>
				<string>--bats</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>mDNSResponder Leaks</string>
			<key>Description</key>
			<string>Checks mDNSResponder for memory leaks.</string>
			<key>AsRoot</key>
			<true/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>60</integer>
			<key>IgnoreOutput</key>
			<true/>
			<key>Command</key>
			<array>
				<string>/usr/bin/leaks</string>
				<string>mDNSResponder</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>KeepAlive Record Registration</string>
			<key>Description</key>
			<string>Tests KeepAlive record registrations.</string>
			<key>AsRoot</key>
			<false/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>60</integer>
			<key>IgnoreOutput</key>
			<true/>
			<key>Command</key>
			<array>
				<string>/AppleInternal/Tests/mDNSResponder/network-isolate-device</string>
				<string>;</string>
				<string>/usr/local/bin/dnssdutil</string>
				<string>test</string>
				<string>keepalive</string>
				<string>--format</string>
				<string>json</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>mDNSResponder Leaks</string>
			<key>Description</key>
			<string>Checks mDNSResponder for memory leaks.</string>
			<key>AsRoot</key>
			<true/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>60</integer>
			<key>IgnoreOutput</key>
			<true/>
			<key>Command</key>
			<array>
				<string>/usr/bin/leaks</string>
				<string>mDNSResponder</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>Probe Conflicts (IPv4)</string>
			<key>Description</key>
			<string>Tests various probe conflict scenarios, some of which are expected to result in service instance and record renames. The test service is registered on the loopback interface. The probe conflicts occur over IPv4 via the loopback interface.</string>
			<key>AsRoot</key>
			<false/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>400</integer>
			<key>IgnoreOutput</key>
			<true/>
			<key>Command</key>
			<array>
				<string>/AppleInternal/Tests/mDNSResponder/network-isolate-device</string>
				<string>;</string>
				<string>/usr/local/bin/dnssdutil</string>
				<string>test</string>
				<string>probeconflicts</string>
				<string>--interface</string>
				<string>lo0</string>
				<string>--extraWait 2000</string>
				<string>--ipv4</string>
				<string>--format</string>
				<string>json</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>mDNSResponder Leaks</string>
			<key>Description</key>
			<string>Checks mDNSResponder for memory leaks.</string>
			<key>AsRoot</key>
			<true/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>60</integer>
			<key>IgnoreOutput</key>
			<true/>
			<key>Command</key>
			<array>
				<string>/usr/bin/leaks</string>
				<string>mDNSResponder</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>Probe Conflicts (IPv6)</string>
			<key>Description</key>
			<string>Tests various probe conflict scenarios, some of which are expected to result in service instance and record renames. The test service is registered on the loopback interface. The probe conflicts occur over IPv6 via the loopback interface.</string>
			<key>AsRoot</key>
			<false/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>400</integer>
			<key>IgnoreOutput</key>
			<true/>
			<key>Command</key>
			<array>
				<string>/AppleInternal/Tests/mDNSResponder/network-isolate-device</string>
				<string>;</string>
				<string>/usr/local/bin/dnssdutil</string>
				<string>test</string>
				<string>probeconflicts</string>
				<string>--interface</string>
				<string>lo0</string>
				<string>--extraWait 2000</string>
				<string>--ipv6</string>
				<string>--format</string>
				<string>json</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>mDNSResponder Leaks</string>
			<key>Description</key>
			<string>Checks mDNSResponder for memory leaks.</string>
			<key>AsRoot</key>
			<true/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>60</integer>
			<key>IgnoreOutput</key>
			<true/>
			<key>Command</key>
			<array>
				<string>/usr/bin/leaks</string>
				<string>mDNSResponder</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>Probe Conflicts (Registration On Any Interface, IPv4)</string>
			<key>Description</key>
			<string>Tests various probe conflict scenarios, some of which are expected to result in service instance and record renames. The test service is registered using the kDNSServiceInterfaceIndexAny interface index. The probe conflicts occur over IPv4 via the loopback interface.</string>
			<key>AsRoot</key>
			<false/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>400</integer>
			<key>IgnoreOutput</key>
			<true/>
			<key>Command</key>
			<array>
				<string>/AppleInternal/Tests/mDNSResponder/network-isolate-device</string>
				<string>;</string>
				<string>/usr/local/bin/dnssdutil</string>
				<string>test</string>
				<string>probeconflicts</string>
				<string>--interface</string>
				<string>lo0</string>
				<string>--extraWait 2000</string>
				<string>--ipv4</string>
				<string>--registerOnAny</string>
				<string>--format</string>
				<string>json</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>mDNSResponder Leaks</string>
			<key>Description</key>
			<string>Checks mDNSResponder for memory leaks.</string>
			<key>AsRoot</key>
			<true/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>60</integer>
			<key>IgnoreOutput</key>
			<true/>
			<key>Command</key>
			<array>
				<string>/usr/bin/leaks</string>
				<string>mDNSResponder</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>Probe Conflicts (Registration On Any Interface, IPv6)</string>
			<key>Description</key>
			<string>Tests various probe conflict scenarios, some of which are expected to result in service instance and record renames. The test service is registered using the kDNSServiceInterfaceIndexAny interface index. The probe conflicts occur over IPv6 via the loopback interface.</string>
			<key>AsRoot</key>
			<false/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>400</integer>
			<key>IgnoreOutput</key>
			<true/>
			<key>Command</key>
			<array>
				<string>/AppleInternal/Tests/mDNSResponder/network-isolate-device</string>
				<string>;</string>
				<string>/usr/local/bin/dnssdutil</string>
				<string>test</string>
				<string>probeconflicts</string>
				<string>--interface</string>
				<string>lo0</string>
				<string>--extraWait 2000</string>
				<string>--ipv6</string>
				<string>--registerOnAny</string>
				<string>--format</string>
				<string>json</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>mDNSResponder Leaks</string>
			<key>Description</key>
			<string>Checks mDNSResponder for memory leaks.</string>
			<key>AsRoot</key>
			<true/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>60</integer>
			<key>IgnoreOutput</key>
			<true/>
			<key>Command</key>
			<array>
				<string>/usr/bin/leaks</string>
				<string>mDNSResponder</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>Expensive/Constrained Interface</string>
			<key>Description</key>
			<string>Test the following situation:
1. The interface is set to expensive and inexpensive, and the query is set to DenyExpensive, a continuous ADD/REMOVE sequence is expected.
2. The interface is set to expensive and inexpensive, and the query does not DenyExpensive, no update is expected.
3. The interface is set to constrained and unconstrained, and the query is set to DenyConstrained, a continuous ADD/REMOVE sequence is expected.
4. The interface is set to constrained and unconstrained, and the query does not DenyConstrained, no update is expected.
5. The interface is set to expensive and constrained, and the query is set to DenyExpensive and DenyConstrained.</string>
			<key>AsRoot</key>
			<true/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>1200</integer>
			<key>IgnoreOutput</key>
			<false/>
			<key>Command</key>
			<array>
				<string>/usr/local/bin/dnssdutil</string>
				<string>test</string>
				<string>expensive_constrained_updates</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>mDNSResponder Leaks</string>
			<key>Description</key>
			<string>Checks mDNSResponder for memory leaks.</string>
			<key>AsRoot</key>
			<true/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>60</integer>
			<key>IgnoreOutput</key>
			<true/>
			<key>Command</key>
			<array>
				<string>/usr/bin/leaks</string>
				<string>mDNSResponder</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>DNS Proxy</string>
			<key>Description</key>
			<string>Tests mDNSResponder&apos;s DNS proxy by sending it a variety of queries and verifying the responses. The queries are sent via UDP and TCP to the DNS proxy&apos;s IPV4 and IPv6 addresses. The DNS proxy is tested while it runs in different modes. Aside from the mode without a DNS64 prefix, the DNS proxy is tested while it runs with all of the valid DNS64 prefix lengths: 32-bit, 40-bit, 48-bit, 56-bit, 64-bit, and 96-bit. Uses mrc_dns_proxy to start the DNS proxies.</string>
			<key>AsRoot</key>
			<true/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>600</integer>
			<key>IgnoreOutput</key>
			<true/>
			<key>Command</key>
			<array>
				<string>/AppleInternal/Tests/mDNSResponder/network-isolate-device</string>
				<string>;</string>
				<string>/usr/local/bin/dnssdutil</string>
				<string>test</string>
				<string>dnsproxy</string>
				<string>--format</string>
				<string>json</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>mDNSResponder Leaks</string>
			<key>Description</key>
			<string>Checks mDNSResponder for memory leaks.</string>
			<key>AsRoot</key>
			<true/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>60</integer>
			<key>IgnoreOutput</key>
			<true/>
			<key>Command</key>
			<array>
				<string>/usr/bin/leaks</string>
				<string>mDNSResponder</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>Record Registration</string>
			<key>Description</key>
			<string>Tests the registration and deregistration of records.</string>
			<key>AsRoot</key>
			<false/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>600</integer>
			<key>IgnoreOutput</key>
			<true/>
			<key>Command</key>
			<array>
				<string>/AppleInternal/Tests/mDNSResponder/network-isolate-device</string>
				<string>;</string>
				<string>/usr/local/bin/dnssdutil</string>
				<string>test</string>
				<string>record-registration</string>
				<string>--interval</string>
				<string>1500</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>mDNSResponder Leaks</string>
			<key>Description</key>
			<string>Checks mDNSResponder for memory leaks.</string>
			<key>AsRoot</key>
			<true/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>60</integer>
			<key>IgnoreOutput</key>
			<true/>
			<key>Command</key>
			<array>
				<string>/usr/bin/leaks</string>
				<string>mDNSResponder</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>Record Cache Flush</string>
			<key>Description</key>
			<string>Tests the mrc_record_cache_flush SPI.</string>
			<key>AsRoot</key>
			<false/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>300</integer>
			<key>IgnoreOutput</key>
			<true/>
			<key>Command</key>
			<array>
				<string>/AppleInternal/Tests/mDNSResponder/network-isolate-device</string>
				<string>;</string>
				<string>/usr/local/bin/dnssdutil</string>
				<string>test</string>
				<string>record-cache-flush</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>mDNSResponder Leaks</string>
			<key>Description</key>
			<string>Checks mDNSResponder for memory leaks.</string>
			<key>AsRoot</key>
			<true/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>60</integer>
			<key>IgnoreOutput</key>
			<true/>
			<key>Command</key>
			<array>
				<string>/usr/bin/leaks</string>
				<string>mDNSResponder</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>Resolver Override</string>
			<key>Description</key>
			<string>Verifies that a resolver override set with DNSServiceAttributeSetResolverOverride() is used when querying for records with DNSServiceQueryRecordWithAttribute().</string>
			<key>AsRoot</key>
			<false/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>300</integer>
			<key>IgnoreOutput</key>
			<true/>
			<key>Command</key>
			<array>
				<string>/AppleInternal/Tests/mDNSResponder/network-isolate-device</string>
				<string>;</string>
				<string>/usr/local/bin/dnssdutil</string>
				<string>test</string>
				<string>resolver-override</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>mDNSResponder Leaks</string>
			<key>Description</key>
			<string>Checks mDNSResponder for memory leaks.</string>
			<key>AsRoot</key>
			<true/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>60</integer>
			<key>IgnoreOutput</key>
			<true/>
			<key>Command</key>
			<array>
				<string>/usr/bin/leaks</string>
				<string>mDNSResponder</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>Optimistic DNS</string>
			<key>Description</key>
			<string>Tests mDNSResponder&apos;s Optimistic DNS functionality, including its interoperability with search domains.</string>
			<key>AsRoot</key>
			<true/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>300</integer>
			<key>IgnoreOutput</key>
			<true/>
			<key>Command</key>
			<array>
				<string>/AppleInternal/Tests/mDNSResponder/network-isolate-device</string>
				<string>;</string>
				<string>/usr/local/bin/dnssdutil</string>
				<string>test</string>
				<string>optimisticDNS</string>
				<string>--full</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>mDNSResponder Leaks</string>
			<key>Description</key>
			<string>Checks mDNSResponder for memory leaks.</string>
			<key>AsRoot</key>
			<true/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>60</integer>
			<key>IgnoreOutput</key>
			<true/>
			<key>Command</key>
			<array>
				<string>/usr/bin/leaks</string>
				<string>mDNSResponder</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>State Dump</string>
			<key>Description</key>
			<string>1.  Tests whether the state dump can be triggered correctly, and whether the file (or stdout&apos;s output) contains the full state information. 2. Checks whether the number of state dump files has an upper limit to avoid wasting disk space.</string>
			<key>AsRoot</key>
			<true/>
			<key>RequiresWiFi</key>
			<true/>
			<key>Timeout</key>
			<integer>60</integer>
			<key>IgnoreOutput</key>
			<false/>
			<key>Command</key>
			<array>
				<string>/usr/local/bin/dnssdutil</string>
				<string>browseAll</string>
				<string>&amp;&amp;</string>
				<string>/bin/sh</string>
				<string>/AppleInternal/Tests/mDNSResponder/bats_test_state_dump.sh</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>mDNSResponder Leaks</string>
			<key>Description</key>
			<string>Checks mDNSResponder for memory leaks.</string>
			<key>AsRoot</key>
			<true/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>60</integer>
			<key>IgnoreOutput</key>
			<true/>
			<key>Command</key>
			<array>
				<string>/usr/bin/leaks</string>
				<string>mDNSResponder</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>Fix Verification #1</string>
			<key>Description</key>
			<string>Fix Verification #1</string>
			<key>AsRoot</key>
			<true/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>45</integer>
			<key>IgnoreOutput</key>
			<true/>
			<key>Command</key>
			<array>
				<string>/usr/local/bin/dnssdutil</string>
				<string>verifyFix</string>
				<string>earlyAWDL</string>
				<string>--format</string>
				<string>json</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>mDNSResponder Leaks</string>
			<key>Description</key>
			<string>Checks mDNSResponder for memory leaks.</string>
			<key>AsRoot</key>
			<true/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>60</integer>
			<key>IgnoreOutput</key>
			<true/>
			<key>Command</key>
			<array>
				<string>/usr/bin/leaks</string>
				<string>mDNSResponder</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>Multiple Stub Connections</string>
			<key>Description</key>
			<string>Verifies any issues with multiple simultanious connections from a client</string>
			<key>AsRoot</key>
			<true/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>60</integer>
			<key>IgnoreOutput</key>
			<false/>
			<key>Command</key>
			<array>
				<string>/usr/local/bin/dnssdutil</string>
				<string>test</string>
				<string>multiconnect</string>
				<string>--connections</string>
				<string>100</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>mDNSResponder Leaks</string>
			<key>Description</key>
			<string>Checks mDNSResponder for memory leaks.</string>
			<key>AsRoot</key>
			<true/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>60</integer>
			<key>IgnoreOutput</key>
			<true/>
			<key>Command</key>
			<array>
				<string>/usr/bin/leaks</string>
				<string>mDNSResponder</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>DNSSEC Test - Basic Validation</string>
			<key>Description</key>
			<string>Verifies if mDNSResponder could handle the basic DNSSEC validation</string>
			<key>AsRoot</key>
			<true/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>10</integer>
			<key>IgnoreOutput</key>
			<false/>
			<key>Command</key>
			<array>
				<string>/usr/local/bin/dnssdutil</string>
				<string>test</string>
				<string>dnssec</string>
				<string>-n</string>
				<string>&quot;basic validation&quot;</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>mDNSResponder Leaks</string>
			<key>Description</key>
			<string>Checks mDNSResponder for memory leaks.</string>
			<key>AsRoot</key>
			<true/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>60</integer>
			<key>IgnoreOutput</key>
			<true/>
			<key>Command</key>
			<array>
				<string>/usr/bin/leaks</string>
				<string>mDNSResponder</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>Paragon (Daemon Score Card)</string>
			<key>Description</key>
			<string>Gathers performance metrics and performs daemon-related checks after a simple kickstart of mDNSResponder daemon</string>
			<key>AsRoot</key>
			<true/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>60</integer>
			<key>IgnoreOutput</key>
			<false/>
			<key>Command</key>
			<array>
				<string>/usr/local/bin/perfcheck</string>
				<string>daemon</string>
				<string>-p</string>
				<string>mDNSResponder</string>
				<string>--perfdata</string>
				<string>/tmp/scorecard-mDNSResponder.pdj</string>
				<string>--xpc-trace</string>
				<string>-s</string>
				<string>2</string>
				<string>-c</string>
				<string>launchctl</string>
				<string>kickstart</string>
				<string>-kp</string>
				<string>system/com.apple.mDNSResponder.reloaded</string>
				<string>2&gt;</string>
				<string>/tmp/perf_mDNSResponder</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>LocalOnlyATimeoutTest</string>
			<key>Description</key>
			<string>LocalOnlyATimeoutTest from Tests.xctest</string>
			<key>AsRoot</key>
			<false/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>5</integer>
			<key>IgnoreOutput</key>
			<false/>
			<key>Command</key>
			<array>
				<string>/usr/local/bin/dnssdutil</string>
				<string>test</string>
				<string>xctest</string>
				<string>-c</string>
				<string>LocalOnlyATimeoutTest</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>CNameRecordTest</string>
			<key>Description</key>
			<string>CNameRecordTest from Tests.xctest</string>
			<key>AsRoot</key>
			<false/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>5</integer>
			<key>IgnoreOutput</key>
			<false/>
			<key>Command</key>
			<array>
				<string>/usr/local/bin/dnssdutil</string>
				<string>test</string>
				<string>xctest</string>
				<string>-c</string>
				<string>CNameRecordTest</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>mDNSCoreReceiveTest</string>
			<key>Description</key>
			<string>mDNSCoreReceiveTest from Tests.xctest</string>
			<key>AsRoot</key>
			<false/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>5</integer>
			<key>IgnoreOutput</key>
			<false/>
			<key>Command</key>
			<array>
				<string>/usr/local/bin/dnssdutil</string>
				<string>test</string>
				<string>xctest</string>
				<string>-c</string>
				<string>mDNSCoreReceiveTest</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>ResourceRecordTest</string>
			<key>Description</key>
			<string>ResourceRecordTest from Tests.xctest</string>
			<key>AsRoot</key>
			<false/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>5</integer>
			<key>IgnoreOutput</key>
			<false/>
			<key>Command</key>
			<array>
				<string>/usr/local/bin/dnssdutil</string>
				<string>test</string>
				<string>xctest</string>
				<string>-c</string>
				<string>ResourceRecordTest</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>DNSMessageTest</string>
			<key>Description</key>
			<string>DNSMessageTest from Tests.xctest</string>
			<key>AsRoot</key>
			<false/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>5</integer>
			<key>IgnoreOutput</key>
			<false/>
			<key>Command</key>
			<array>
				<string>/usr/local/bin/dnssdutil</string>
				<string>test</string>
				<string>xctest</string>
				<string>-c</string>
				<string>DNSMessageTest</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>HelperFunctionTest</string>
			<key>Description</key>
			<string>HelperFunctionTest from Tests.xctest</string>
			<key>AsRoot</key>
			<false/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>5</integer>
			<key>IgnoreOutput</key>
			<false/>
			<key>Command</key>
			<array>
				<string>/usr/local/bin/dnssdutil</string>
				<string>test</string>
				<string>xctest</string>
				<string>-c</string>
				<string>HelperFunctionTest</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>CacheOrderTest</string>
			<key>Description</key>
			<string>CacheOrderTest from Tests.xctest</string>
			<key>AsRoot</key>
			<false/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>5</integer>
			<key>IgnoreOutput</key>
			<false/>
			<key>Command</key>
			<array>
				<string>/usr/local/bin/dnssdutil</string>
				<string>test</string>
				<string>xctest</string>
				<string>-c</string>
				<string>CacheOrderTest</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>LocalOnlyWithInterfacesTest</string>
			<key>Description</key>
			<string>LocalOnlyWithInterfacesTest from Tests.xctest</string>
			<key>AsRoot</key>
			<false/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>5</integer>
			<key>IgnoreOutput</key>
			<false/>
			<key>Command</key>
			<array>
				<string>/usr/local/bin/dnssdutil</string>
				<string>test</string>
				<string>xctest</string>
				<string>-c</string>
				<string>LocalOnlyWithInterfacesTest</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>PathEvaluationTest</string>
			<key>Description</key>
			<string>PathEvaluationTest from Tests.xctest</string>
			<key>AsRoot</key>
			<false/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>5</integer>
			<key>IgnoreOutput</key>
			<false/>
			<key>Command</key>
			<array>
				<string>/usr/local/bin/dnssdutil</string>
				<string>test</string>
				<string>xctest</string>
				<string>-c</string>
				<string>PathEvaluationTest</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>DNSDigestTest</string>
			<key>Description</key>
			<string>Test if the HMAC MD5 utilities in DNSDigest.c can generate the correct digest.</string>
			<key>AsRoot</key>
			<false/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>5</integer>
			<key>IgnoreOutput</key>
			<false/>
			<key>Command</key>
			<array>
				<string>/usr/local/bin/dnssdutil</string>
				<string>test</string>
				<string>xctest</string>
				<string>-c</string>
				<string>DNSDigestTest</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>DNSSEC Unit - DNSSECObjTrustAnchorTest</string>
			<key>Description</key>
			<string>Test the methods of dnssec_obj_trust_anchor_t.</string>
			<key>AsRoot</key>
			<false/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>5</integer>
			<key>IgnoreOutput</key>
			<false/>
			<key>Command</key>
			<array>
				<string>/usr/local/bin/dnssdutil</string>
				<string>test</string>
				<string>xctest</string>
				<string>-c</string>
				<string>DNSSECObjTrustAnchorTest</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>DNSSEC Unit - DNSSECObjTrustAnchorManagerTest</string>
			<key>Description</key>
			<string>Test the methods of dnssec_obj_trust_anchor_manager_t.</string>
			<key>AsRoot</key>
			<false/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>5</integer>
			<key>IgnoreOutput</key>
			<false/>
			<key>Command</key>
			<array>
				<string>/usr/local/bin/dnssdutil</string>
				<string>test</string>
				<string>xctest</string>
				<string>-c</string>
				<string>DNSSECObjTrustAnchorManagerTest</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>DNSSEC Unit - DNSSECObjDomainNameTest</string>
			<key>Description</key>
			<string>Test the methods of dnssec_obj_domain_name_t.</string>
			<key>AsRoot</key>
			<false/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>5</integer>
			<key>IgnoreOutput</key>
			<false/>
			<key>Command</key>
			<array>
				<string>/usr/local/bin/dnssdutil</string>
				<string>test</string>
				<string>xctest</string>
				<string>-c</string>
				<string>DNSSECObjDomainNameTest</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>DNSSEC Unit - DNSSECObjRRValidator</string>
			<key>Description</key>
			<string>Test the methods of dnssec_obj_rr_validator_t.</string>
			<key>AsRoot</key>
			<false/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>5</integer>
			<key>IgnoreOutput</key>
			<false/>
			<key>Command</key>
			<array>
				<string>/usr/local/bin/dnssdutil</string>
				<string>test</string>
				<string>xctest</string>
				<string>-c</string>
				<string>DNSSECObjRRValidator</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>DNSSEC Unit - DNSSECObjDenialOfExistenceTest</string>
			<key>Description</key>
			<string>Test the methods of dnssec_obj_denial_of_existence_t.</string>
			<key>AsRoot</key>
			<false/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>5</integer>
			<key>IgnoreOutput</key>
			<false/>
			<key>Command</key>
			<array>
				<string>/usr/local/bin/dnssdutil</string>
				<string>test</string>
				<string>xctest</string>
				<string>-c</string>
				<string>DNSSECObjDenialOfExistenceTest</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>DNSSEC Unit - DNSSECObjRRTest</string>
			<key>Description</key>
			<string>Test the methods of dnssec_obj_rr_t.</string>
			<key>AsRoot</key>
			<false/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>5</integer>
			<key>IgnoreOutput</key>
			<false/>
			<key>Command</key>
			<array>
				<string>/usr/local/bin/dnssdutil</string>
				<string>test</string>
				<string>xctest</string>
				<string>-c</string>
				<string>DNSSECObjRRTest</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>DNSSEC Unit - DNSSECObjRRSOATest</string>
			<key>Description</key>
			<string>Test the methods of dnssec_obj_rr_soa_t.</string>
			<key>AsRoot</key>
			<false/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>5</integer>
			<key>IgnoreOutput</key>
			<false/>
			<key>Command</key>
			<array>
				<string>/usr/local/bin/dnssdutil</string>
				<string>test</string>
				<string>xctest</string>
				<string>-c</string>
				<string>DNSSECObjRRSOATest</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>DNSSEC Unit - DNSSECObjRRDSTest</string>
			<key>Description</key>
			<string>Test the methods of dnssec_obj_rr_ds_t.</string>
			<key>AsRoot</key>
			<false/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>5</integer>
			<key>IgnoreOutput</key>
			<false/>
			<key>Command</key>
			<array>
				<string>/usr/local/bin/dnssdutil</string>
				<string>test</string>
				<string>xctest</string>
				<string>-c</string>
				<string>DNSSECObjRRDSTest</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>DNSSEC Unit - DNSSECObjRRNSECTest</string>
			<key>Description</key>
			<string>Test the methods of dnssec_obj_rr_nsec_t.</string>
			<key>AsRoot</key>
			<false/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>5</integer>
			<key>IgnoreOutput</key>
			<false/>
			<key>Command</key>
			<array>
				<string>/usr/local/bin/dnssdutil</string>
				<string>test</string>
				<string>xctest</string>
				<string>-c</string>
				<string>DNSSECObjRRNSECTest</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>DNSSEC Unit - DNSSECObjRRRRSigTest</string>
			<key>Description</key>
			<string>Test the methods of dnssec_obj_rr_rrsig_t</string>
			<key>AsRoot</key>
			<false/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>5</integer>
			<key>IgnoreOutput</key>
			<false/>
			<key>Command</key>
			<array>
				<string>/usr/local/bin/dnssdutil</string>
				<string>test</string>
				<string>xctest</string>
				<string>-c</string>
				<string>DNSSECObjRRRRSigTest</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>DNSSEC Unit - DNSSECObjRRDNSKeyTest</string>
			<key>Description</key>
			<string>Test the methods of dnssec_obj_rr_dnskey_t</string>
			<key>AsRoot</key>
			<false/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>5</integer>
			<key>IgnoreOutput</key>
			<false/>
			<key>Command</key>
			<array>
				<string>/usr/local/bin/dnssdutil</string>
				<string>test</string>
				<string>xctest</string>
				<string>-c</string>
				<string>DNSSECObjRRDNSKeyTest</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>DNSSEC Unit - DNSSECObjRRNSEC3Test</string>
			<key>Description</key>
			<string>Test the methods of dnssec_obj_rr_nsec3_t</string>
			<key>AsRoot</key>
			<false/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>5</integer>
			<key>IgnoreOutput</key>
			<false/>
			<key>Command</key>
			<array>
				<string>/usr/local/bin/dnssdutil</string>
				<string>test</string>
				<string>xctest</string>
				<string>-c</string>
				<string>DNSSECObjRRNSEC3Test</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>DNSSEC Unit - BaseEncodingTest</string>
			<key>Description</key>
			<string>Test base 64 and base 32 HEX encoding.</string>
			<key>AsRoot</key>
			<false/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>5</integer>
			<key>IgnoreOutput</key>
			<false/>
			<key>Command</key>
			<array>
				<string>/usr/local/bin/dnssdutil</string>
				<string>test</string>
				<string>xctest</string>
				<string>-c</string>
				<string>BaseEncodingTest</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>mDNSResponder Leaks</string>
			<key>Description</key>
			<string>Checks mDNSResponder for memory leaks.</string>
			<key>AsRoot</key>
			<true/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>60</integer>
			<key>IgnoreOutput</key>
			<true/>
			<key>Command</key>
			<array>
				<string>/usr/bin/leaks</string>
				<string>mDNSResponder</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>DNSSEC Integration - Basic Validation</string>
			<key>Description</key>
			<string>Test the DNSSEC validation capability of mDNSResponder when the validation result is Secure, with different number of address records and different DNSKEY algorithms.</string>
			<key>AsRoot</key>
			<false/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>5</integer>
			<key>IgnoreOutput</key>
			<false/>
			<key>Command</key>
			<array>
				<string>/usr/local/bin/dnssdutil</string>
				<string>test</string>
				<string>dnssec</string>
				<string>--testCaseName</string>
				<string>&quot;basic validation&quot;</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>mDNSResponder Leaks</string>
			<key>Description</key>
			<string>Checks mDNSResponder for memory leaks.</string>
			<key>AsRoot</key>
			<true/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>60</integer>
			<key>IgnoreOutput</key>
			<true/>
			<key>Command</key>
			<array>
				<string>/usr/bin/leaks</string>
				<string>mDNSResponder</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>DNS Object Unit - DNSObjDomainNameTest</string>
			<key>Description</key>
			<string>Test dns_obj_domain_name_t object</string>
			<key>AsRoot</key>
			<false/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>5</integer>
			<key>IgnoreOutput</key>
			<false/>
			<key>Command</key>
			<array>
				<string>/usr/local/bin/dnssdutil</string>
				<string>test</string>
				<string>xctest</string>
				<string>-c</string>
				<string>DNSObjDomainNameTest</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>DNS Object Unit - DNSObjRRTest</string>
			<key>Description</key>
			<string>Test dns_obj_rr_t object</string>
			<key>AsRoot</key>
			<false/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>5</integer>
			<key>IgnoreOutput</key>
			<false/>
			<key>Command</key>
			<array>
				<string>/usr/local/bin/dnssdutil</string>
				<string>test</string>
				<string>xctest</string>
				<string>-c</string>
				<string>DNSObjRRTest</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>DNS Object Unit - DNSObjRRSOATest</string>
			<key>Description</key>
			<string>Test dns_obj_rr_soa_t object</string>
			<key>AsRoot</key>
			<false/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>5</integer>
			<key>IgnoreOutput</key>
			<false/>
			<key>Command</key>
			<array>
				<string>/usr/local/bin/dnssdutil</string>
				<string>test</string>
				<string>xctest</string>
				<string>-c</string>
				<string>DNSObjRRSOATest</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>DNS Object Unit - DNSObjRRSRVTest</string>
			<key>Description</key>
			<string>Test dns_obj_rr_srv_t object</string>
			<key>AsRoot</key>
			<false/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>5</integer>
			<key>IgnoreOutput</key>
			<false/>
			<key>Command</key>
			<array>
				<string>/usr/local/bin/dnssdutil</string>
				<string>test</string>
				<string>xctest</string>
				<string>-c</string>
				<string>DNSObjRRSRVTest</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>DNS Object Unit - DNSObjRRDSTest</string>
			<key>Description</key>
			<string>Test dns_obj_rr_ds_t object</string>
			<key>AsRoot</key>
			<false/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>5</integer>
			<key>IgnoreOutput</key>
			<false/>
			<key>Command</key>
			<array>
				<string>/usr/local/bin/dnssdutil</string>
				<string>test</string>
				<string>xctest</string>
				<string>-c</string>
				<string>DNSObjRRDSTest</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>DNS Object Unit - DNSObjRRDNSKeyTest</string>
			<key>Description</key>
			<string>Test dns_obj_rr_dnskey_t object</string>
			<key>AsRoot</key>
			<false/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>5</integer>
			<key>IgnoreOutput</key>
			<false/>
			<key>Command</key>
			<array>
				<string>/usr/local/bin/dnssdutil</string>
				<string>test</string>
				<string>xctest</string>
				<string>-c</string>
				<string>DNSObjRRDNSKeyTest</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>DNS Object Unit - DNSObjRRNSEC3Test</string>
			<key>Description</key>
			<string>Test dns_obj_rr_nsec3_t object</string>
			<key>AsRoot</key>
			<false/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>5</integer>
			<key>IgnoreOutput</key>
			<false/>
			<key>Command</key>
			<array>
				<string>/usr/local/bin/dnssdutil</string>
				<string>test</string>
				<string>xctest</string>
				<string>-c</string>
				<string>DNSObjRRNSEC3Test</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>UTF8 Validator Test</string>
			<key>Description</key>
			<string>Test mDNSAreUTF8String.</string>
			<key>AsRoot</key>
			<false/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>5</integer>
			<key>IgnoreOutput</key>
			<false/>
			<key>Command</key>
			<array>
				<string>/usr/local/bin/dnssdutil</string>
				<string>test</string>
				<string>xctest</string>
				<string>-c</string>
				<string>UTF8ValidatorTest</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>Change Text Record</string>
			<key>Description</key>
			<string>SRP Client Changes Text Record, SRP Server Does DNSServiceUpdateRecord.</string>
			<key>AsRoot</key>
			<false/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>15</integer>
			<key>IgnoreOutput</key>
			<false/>
			<key>Command</key>
			<array>
				<string>/usr/local/bin/srp-test-server</string>
				<string>--test</string>
				<string>change-text-record</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>Lease Expiry</string>
			<key>Description</key>
			<string>Verify service and host entries are removed when the lease provided by the SRP client expires.</string>
			<key>AsRoot</key>
			<false/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>20</integer>
			<key>IgnoreOutput</key>
			<false/>
			<key>Command</key>
			<array>
				<string>/usr/local/bin/srp-test-server</string>
				<string>--test</string>
				<string>lease-expiry</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>Lease Renewal</string>
			<key>Description</key>
			<string>Verify service is renewed upon request from the client when the current lease is about to expire.</string>
			<key>AsRoot</key>
			<false/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>30</integer>
			<key>IgnoreOutput</key>
			<false/>
			<key>Command</key>
			<array>
				<string>/usr/local/bin/srp-test-server</string>
				<string>--test</string>
				<string>lease-renewal</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>Single SRPL Update test</string>
			<key>Description</key>
			<string>
				Test that when we generate a DNS Update message and deliver it through the SRP replication
				input path, it is successfully registered.
			</string>
			<key>AsRoot</key>
			<false/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>20</integer>
			<key>IgnoreOutput</key>
			<false/>
			<key>Command</key>
			<array>
				<string>/usr/local/bin/srp-test-server</string>
				<string>--test</string>
				<string>single-srpl-update</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>Two-instance SRPL registration test</string>
			<key>Description</key>
			<string>
				Test that when we generate two DNS Update message, each of which adds a single instance,
				and deliver them together through the SRP replication input path, both are successfully registered,
				and the host registration is only done once and not renewed.
			</string>
			<key>AsRoot</key>
			<false/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>20</integer>
			<key>IgnoreOutput</key>
			<false/>
			<key>Command</key>
			<array>
				<string>/usr/local/bin/srp-test-server</string>
				<string>--test</string>
				<string>srpl-two-instances</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>Two-instance SRPL registration + remove test</string>
			<key>Description</key>
			<string>
				Test that when we generate two DNS Update message, the first of which adds two instances, and the
				second of which removes the first instance, and then we deliver them together through the SRP replication
				input path, the second is successfully registered, but the first is never registered, and the host registration
				and second instance registration are done exactly once and not renewed.
			</string>
			<key>AsRoot</key>
			<false/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>20</integer>
			<key>IgnoreOutput</key>
			<false/>
			<key>Command</key>
			<array>
				<string>/usr/local/bin/srp-test-server</string>
				<string>--test</string>
				<string>srpl-two-instances-one-remove</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>Zero-instance SRPL registration test</string>
			<key>Description</key>
			<string> test that an SRP client registers a host with no instances through the primary SRP server, and the update message is delivered to the other SRP server through SRPL connection and then the host is registered on that SRP server.</string>
			<key>AsRoot</key>
			<false/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>20</integer>
			<key>IgnoreOutput</key>
			<false/>
			<key>Command</key>
			<array>
				<string>/usr/local/bin/srp-test-server</string>
				<string>--test</string>
				<string>srpl-zero-instances-two-servers</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>SRPL lease time test</string>
			<key>Description</key>
			<string> test that lease time gets renewed as expected from replication.</string>
			<key>AsRoot</key>
			<false/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>60</integer>
			<key>IgnoreOutput</key>
			<false/>
			<key>Command</key>
			<array>
				<string>/usr/local/bin/srp-test-server</string>
				<string>--test</string>
				<string>srpl-lease-time</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>SRPL cycle through peers test</string>
			<key>Description</key>
			<string> test that lease time is not accidentally extended because of replication.</string>
			<key>AsRoot</key>
			<false/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>60</integer>
			<key>IgnoreOutput</key>
			<false/>
			<key>Command</key>
			<array>
				<string>/usr/local/bin/srp-test-server</string>
				<string>--test</string>
				<string>srpl-cycle-through-peers</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>SRPL update after remove test</string>
			<key>Description</key>
			<string> test that a stale update through replication does not re-add the host that has been removed by the actual device.</string>
			<key>AsRoot</key>
			<false/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>60</integer>
			<key>IgnoreOutput</key>
			<false/>
			<key>Command</key>
			<array>
				<string>/usr/local/bin/srp-test-server</string>
				<string>--test</string>
				<string>srpl-update-after-remove</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>Two-instance SRPL registration + remove test with duplicate</string>
			<key>Description</key>
			<string>
				The goal of this test is to generate two DNS Update messages, both for the
				same host, each containing a new registration for a different instance, and
				deliver it through the SRP replication input path. Having passed the update set once
				we then deliver it a second time to see that it is correctly ignored.
				VARIANT: test that if the two updates contain the same messages, the second set are ignored.
			</string>
			<key>AsRoot</key>
			<false/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>20</integer>
			<key>IgnoreOutput</key>
			<false/>
			<key>Command</key>
			<array>
				<string>/usr/local/bin/srp-test-server</string>
				<string>--test</string>
				<string>srpl-two-instances-dup</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>Two-instance SRPL registration + remove test with duplicate of first message only</string>
			<key>Description</key>
			<string>
				The goal of this test is to generate two DNS Update messages, both for the
				same host, each containing a new registration for a different instance, and
				deliver it through the SRP replication input path. Having passed the update set once
				we then deliver it a second time to see that it is correctly ignored.
				VARIANT: test that if the second updates contain only the first message, it is ignored.
			</string>
			<key>AsRoot</key>
			<false/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>20</integer>
			<key>IgnoreOutput</key>
			<false/>
			<key>Command</key>
			<array>
				<string>/usr/local/bin/srp-test-server</string>
				<string>--test</string>
				<string>srpl-two-instances-dup-first</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>Two-instance SRPL registration + remove test with duplicate of last message only</string>
			<key>Description</key>
			<string>
				The goal of this test is to generate two DNS Update messages, both for the
				same host, each containing a new registration for a different instance, and
				deliver it through the SRP replication input path. Having passed the update set once
				we then deliver it a second time to see that it is correctly ignored.
				VARIANT: test that if the second updates contain only the last message, it is ignored.
			</string>
			<key>AsRoot</key>
			<false/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>20</integer>
			<key>IgnoreOutput</key>
			<false/>
			<key>Command</key>
			<array>
				<string>/usr/local/bin/srp-test-server</string>
				<string>--test</string>
				<string>srpl-two-instances-dup-last</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>Two-instance SRPL registration + remove, then add a new instance plus dupes of the original messages</string>
			<key>Description</key>
			<string>
				The goal of this test is to generate two DNS Update messages, both for the
				same host, each containing a new registration for a different instance, and
				deliver it through the SRP replication input path. Having passed the update set once
				we then deliver it a second time to see that it is correctly ignored.
				VARIANT: test that if the second update starts with a new third instance, it is added.
			</string>
			<key>AsRoot</key>
			<false/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>20</integer>
			<key>IgnoreOutput</key>
			<false/>
			<key>Command</key>
			<array>
				<string>/usr/local/bin/srp-test-server</string>
				<string>--test</string>
				<string>srpl-two-instances-dup-add-first</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>Two-instance SRPL registration + remove plus duplicates of these messages and a new instance add</string>
			<key>Description</key>
			<string>
				The goal of this test is to generate two DNS Update messages, both for the
				same host, each containing a new registration for a different instance, and
				deliver it through the SRP replication input path. Having passed the update set once
				we then deliver it a second time to see that it is correctly ignored.
				VARIANT: test that if the second update ends with a new third instance, it is added.
			</string>
			<key>AsRoot</key>
			<false/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>20</integer>
			<key>IgnoreOutput</key>
			<false/>
			<key>Command</key>
			<array>
				<string>/usr/local/bin/srp-test-server</string>
				<string>--test</string>
				<string>srpl-two-instances-dup-add-last</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>Two-instance SRPL registration + remove with different keys</string>
			<key>Description</key>
			<string>
				The goal of this test is to generate two DNS Update messages, both for the
				same host, each containing a new registration for a different instance, and
				deliver it through the SRP replication input path. Having passed the update set once
				we then deliver it a second time to see that it is correctly ignored.
				VARIANT: test that if the two updates are signed with different keys, they are rejected.
			</string>
			<key>AsRoot</key>
			<false/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>20</integer>
			<key>IgnoreOutput</key>
			<false/>
			<key>Command</key>
			<array>
				<string>/usr/local/bin/srp-test-server</string>
				<string>--test</string>
				<string>srpl-two-instances-dup-2keys</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>DNS Dangling Query test</string>
			<key>Description</key>
			<string>
				The goal of this test is to generate two DNS Update messages, both for the
				same host, each containing a new registration for a different instance, and
				deliver it through the SRP replication input path. Having passed the update set once
				we then deliver it a second time to see that it is correctly ignored.
				VARIANT: test that if the two updates are signed with different keys, they are rejected.
			</string>
			<key>AsRoot</key>
			<false/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>20</integer>
			<key>IgnoreOutput</key>
			<false/>
			<key>Command</key>
			<array>
				<string>/usr/local/bin/srp-test-server</string>
				<string>--test</string>
				<string>dns-dangling-query</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>DNS local query</string>
			<key>Description</key>
			<string>
				The goal of this test is to create DNS connection to the test server and attempt to
				look up a name that goes through the local query path. If we get a response, the test
				succeeded.
			</string>
			<key>AsRoot</key>
			<false/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>20</integer>
			<key>IgnoreOutput</key>
			<false/>
			<key>Command</key>
			<array>
				<string>/usr/local/bin/srp-test-server</string>
				<string>--test</string>
				<string>dns-mdns</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>DNS Push local query</string>
			<key>Description</key>
			<string>
				The goal of this test is to create DNS Push connection to the test server and attempt to
				look up a name that goes through the local query path. If we get a response, the test
				succeeded.
			</string>
			<key>AsRoot</key>
			<false/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>20</integer>
			<key>IgnoreOutput</key>
			<false/>
			<key>Command</key>
			<array>
				<string>/usr/local/bin/srp-test-server</string>
				<string>--test</string>
				<string>dns-push-mdns</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>DNS Push server crash</string>
			<key>Description</key>
			<string>
				The goal of this test is to create DNS Push connection to the test server and attempt to
				look up a name that goes through the local (mDNS) query path. Once we have a result, we fake
				an mDNSResponder crash and make sure the query is successfully restarted.
			</string>
			<key>AsRoot</key>
			<false/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>20</integer>
			<key>IgnoreOutput</key>
			<false/>
			<key>Command</key>
			<array>
				<string>/usr/local/bin/srp-test-server</string>
				<string>--test</string>
				<string>dns-push-crash</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>DNS two-question query</string>
			<key>Description</key>
			<string>
			  The goal of this test is to create DSO connection to the test server and send a DNS query that
			  looks up a name that goes through the hardwired query path. If we get a response, the test
			  succeeded.
			</string>
			<key>AsRoot</key>
			<false/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>20</integer>
			<key>IgnoreOutput</key>
			<false/>
			<key>Command</key>
			<array>
				<string>/usr/local/bin/srp-test-server</string>
				<string>--test</string>
				<string>dns-two</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>Listener Longevity test</string>
			<key>Description</key>
			<string>
				The goal of this test is to see that when we start the dnssd proxy UDP listener and deliver
				an SRP registration to it, that the listener is not canceled after 30 seconds. This test is
				in place because of rdar://124631151 (Unable to pair matter thread accessory ...) which was
				cause by erroneously starting a tracker idle timeout when processing an incoming SRP
				registration on port 53, which is where we receive anycast updates.  The test fails if
				after 30 seconds the listener has been canceled.
			</string>
			<key>AsRoot</key>
			<false/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>60</integer>
			<key>IgnoreOutput</key>
			<false/>
			<key>Command</key>
			<array>
				<string>/usr/local/bin/srp-test-server</string>
				<string>--test</string>
				<string>listener-longevity</string>
			</array>
		</dict>
		<dict>
			<key>TestName</key>
			<string>getifaddr test</string>
			<key>Description</key>
			<string>
				This test checks to see that when the link-layer address on an interface is changed, we get a remove event
				for the old address and an add event for the new address in ioloop_map_interface_addresses_here().
			</string>
			<key>AsRoot</key>
			<false/>
			<key>RequiresWiFi</key>
			<false/>
			<key>Timeout</key>
			<integer>2</integer>
			<key>IgnoreOutput</key>
			<false/>
			<key>Command</key>
			<array>
				<string>/usr/local/bin/srp-test-server</string>
				<string>--test</string>
				<string>ifaddrs</string>
			</array>
		</dict>
	</array>
</dict>
</plist>
